Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSE
    IF
    WHILE

Grammar

Rule 0     S' -> line
Rule 1     line -> statement SEMICOLON
Rule 2     statement -> ID EQUALS expression
Rule 3     statement -> declaration EQUALS expression
Rule 4     statement -> declaration LPAREN args RPAREN LBRACKET body RBRACKET
Rule 5     declaration -> type ID
Rule 6     body -> line body
Rule 7     body -> empty
Rule 8     args -> declaration
Rule 9     args -> declaration COMMA declaration
Rule 10    args -> empty
Rule 11    statement -> expression
Rule 12    expression -> expression PLUS expression
Rule 13    expression -> expression MINUS expression
Rule 14    expression -> expression TIMES expression
Rule 15    expression -> expression DIVIDE expression
Rule 16    expression -> MINUS expression
Rule 17    expression -> LPAREN expression RPAREN
Rule 18    expression -> NUMBER
Rule 19    expression -> NAME
Rule 20    type -> INT
Rule 21    type -> FLOAT
Rule 22    type -> DOUBLE
Rule 23    type -> CHAR
Rule 24    empty -> <empty>

Terminals, with rules where they appear

CHAR                 : 23
COMMA                : 9
DIVIDE               : 15
DOUBLE               : 22
ELSE                 : 
EQUALS               : 2 3
FLOAT                : 21
ID                   : 2 5
IF                   : 
INT                  : 20
LBRACKET             : 4
LPAREN               : 4 17
MINUS                : 13 16
NAME                 : 19
NUMBER               : 18
PLUS                 : 12
RBRACKET             : 4
RPAREN               : 4 17
SEMICOLON            : 1
TIMES                : 14
WHILE                : 
error                : 

Nonterminals, with rules where they appear

args                 : 4
body                 : 4 6
declaration          : 3 4 8 9 9
empty                : 7 10
expression           : 2 3 11 12 12 13 13 14 14 15 15 16 17
line                 : 6 0
statement            : 1
type                 : 5

Parsing method: LALR

state 0

    (0) S' -> . line
    (1) line -> . statement SEMICOLON
    (2) statement -> . ID EQUALS expression
    (3) statement -> . declaration EQUALS expression
    (4) statement -> . declaration LPAREN args RPAREN LBRACKET body RBRACKET
    (11) statement -> . expression
    (5) declaration -> . type ID
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME
    (20) type -> . INT
    (21) type -> . FLOAT
    (22) type -> . DOUBLE
    (23) type -> . CHAR

    ID              shift and go to state 3
    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14

    line                           shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    type                           shift and go to state 7

state 1

    (0) S' -> line .



state 2

    (1) line -> statement . SEMICOLON

    SEMICOLON       shift and go to state 15


state 3

    (2) statement -> ID . EQUALS expression

    EQUALS          shift and go to state 16


state 4

    (11) statement -> expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . TIMES expression
    (15) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 11 (statement -> expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 20


state 5

    (3) statement -> declaration . EQUALS expression
    (4) statement -> declaration . LPAREN args RPAREN LBRACKET body RBRACKET

    EQUALS          shift and go to state 21
    LPAREN          shift and go to state 22


state 6

    (17) expression -> LPAREN . expression RPAREN
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME

    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10

    expression                     shift and go to state 23

state 7

    (5) declaration -> type . ID

    ID              shift and go to state 24


state 8

    (16) expression -> MINUS . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME

    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10

    expression                     shift and go to state 25

state 9

    (18) expression -> NUMBER .

    PLUS            reduce using rule 18 (expression -> NUMBER .)
    MINUS           reduce using rule 18 (expression -> NUMBER .)
    TIMES           reduce using rule 18 (expression -> NUMBER .)
    DIVIDE          reduce using rule 18 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 18 (expression -> NUMBER .)
    RPAREN          reduce using rule 18 (expression -> NUMBER .)


state 10

    (19) expression -> NAME .

    PLUS            reduce using rule 19 (expression -> NAME .)
    MINUS           reduce using rule 19 (expression -> NAME .)
    TIMES           reduce using rule 19 (expression -> NAME .)
    DIVIDE          reduce using rule 19 (expression -> NAME .)
    SEMICOLON       reduce using rule 19 (expression -> NAME .)
    RPAREN          reduce using rule 19 (expression -> NAME .)


state 11

    (20) type -> INT .

    ID              reduce using rule 20 (type -> INT .)


state 12

    (21) type -> FLOAT .

    ID              reduce using rule 21 (type -> FLOAT .)


state 13

    (22) type -> DOUBLE .

    ID              reduce using rule 22 (type -> DOUBLE .)


state 14

    (23) type -> CHAR .

    ID              reduce using rule 23 (type -> CHAR .)


state 15

    (1) line -> statement SEMICOLON .

    $end            reduce using rule 1 (line -> statement SEMICOLON .)
    ID              reduce using rule 1 (line -> statement SEMICOLON .)
    MINUS           reduce using rule 1 (line -> statement SEMICOLON .)
    LPAREN          reduce using rule 1 (line -> statement SEMICOLON .)
    NUMBER          reduce using rule 1 (line -> statement SEMICOLON .)
    NAME            reduce using rule 1 (line -> statement SEMICOLON .)
    INT             reduce using rule 1 (line -> statement SEMICOLON .)
    FLOAT           reduce using rule 1 (line -> statement SEMICOLON .)
    DOUBLE          reduce using rule 1 (line -> statement SEMICOLON .)
    CHAR            reduce using rule 1 (line -> statement SEMICOLON .)
    RBRACKET        reduce using rule 1 (line -> statement SEMICOLON .)


state 16

    (2) statement -> ID EQUALS . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME

    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10

    expression                     shift and go to state 26

state 17

    (12) expression -> expression PLUS . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME

    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10

    expression                     shift and go to state 27

state 18

    (13) expression -> expression MINUS . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME

    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10

    expression                     shift and go to state 28

state 19

    (14) expression -> expression TIMES . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME

    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10

    expression                     shift and go to state 29

state 20

    (15) expression -> expression DIVIDE . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME

    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10

    expression                     shift and go to state 30

state 21

    (3) statement -> declaration EQUALS . expression
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME

    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10

    expression                     shift and go to state 31

state 22

    (4) statement -> declaration LPAREN . args RPAREN LBRACKET body RBRACKET
    (8) args -> . declaration
    (9) args -> . declaration COMMA declaration
    (10) args -> . empty
    (5) declaration -> . type ID
    (24) empty -> .
    (20) type -> . INT
    (21) type -> . FLOAT
    (22) type -> . DOUBLE
    (23) type -> . CHAR

    RPAREN          reduce using rule 24 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14

    declaration                    shift and go to state 32
    args                           shift and go to state 33
    empty                          shift and go to state 34
    type                           shift and go to state 7

state 23

    (17) expression -> LPAREN expression . RPAREN
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . TIMES expression
    (15) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 35
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 20


state 24

    (5) declaration -> type ID .

    EQUALS          reduce using rule 5 (declaration -> type ID .)
    LPAREN          reduce using rule 5 (declaration -> type ID .)
    COMMA           reduce using rule 5 (declaration -> type ID .)
    RPAREN          reduce using rule 5 (declaration -> type ID .)


state 25

    (16) expression -> MINUS expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . TIMES expression
    (15) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 16 (expression -> MINUS expression .)
    MINUS           reduce using rule 16 (expression -> MINUS expression .)
    TIMES           reduce using rule 16 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 16 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 16 (expression -> MINUS expression .)
    RPAREN          reduce using rule 16 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! TIMES           [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]


state 26

    (2) statement -> ID EQUALS expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . TIMES expression
    (15) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 2 (statement -> ID EQUALS expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 20


state 27

    (12) expression -> expression PLUS expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . TIMES expression
    (15) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 12 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 12 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 12 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 12 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 20

  ! TIMES           [ reduce using rule 12 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 12 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]


state 28

    (13) expression -> expression MINUS expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . TIMES expression
    (15) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 13 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 13 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 13 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 13 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 20

  ! TIMES           [ reduce using rule 13 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 13 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]


state 29

    (14) expression -> expression TIMES expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . TIMES expression
    (15) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 14 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 14 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 14 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 14 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 14 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 14 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! TIMES           [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]


state 30

    (15) expression -> expression DIVIDE expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . TIMES expression
    (15) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 15 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 15 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 15 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 15 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 15 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 15 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! TIMES           [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]


state 31

    (3) statement -> declaration EQUALS expression .
    (12) expression -> expression . PLUS expression
    (13) expression -> expression . MINUS expression
    (14) expression -> expression . TIMES expression
    (15) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 3 (statement -> declaration EQUALS expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 20


state 32

    (8) args -> declaration .
    (9) args -> declaration . COMMA declaration

    RPAREN          reduce using rule 8 (args -> declaration .)
    COMMA           shift and go to state 36


state 33

    (4) statement -> declaration LPAREN args . RPAREN LBRACKET body RBRACKET

    RPAREN          shift and go to state 37


state 34

    (10) args -> empty .

    RPAREN          reduce using rule 10 (args -> empty .)


state 35

    (17) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 17 (expression -> LPAREN expression RPAREN .)


state 36

    (9) args -> declaration COMMA . declaration
    (5) declaration -> . type ID
    (20) type -> . INT
    (21) type -> . FLOAT
    (22) type -> . DOUBLE
    (23) type -> . CHAR

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14

    declaration                    shift and go to state 38
    type                           shift and go to state 7

state 37

    (4) statement -> declaration LPAREN args RPAREN . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 39


state 38

    (9) args -> declaration COMMA declaration .

    RPAREN          reduce using rule 9 (args -> declaration COMMA declaration .)


state 39

    (4) statement -> declaration LPAREN args RPAREN LBRACKET . body RBRACKET
    (6) body -> . line body
    (7) body -> . empty
    (1) line -> . statement SEMICOLON
    (24) empty -> .
    (2) statement -> . ID EQUALS expression
    (3) statement -> . declaration EQUALS expression
    (4) statement -> . declaration LPAREN args RPAREN LBRACKET body RBRACKET
    (11) statement -> . expression
    (5) declaration -> . type ID
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME
    (20) type -> . INT
    (21) type -> . FLOAT
    (22) type -> . DOUBLE
    (23) type -> . CHAR

    RBRACKET        reduce using rule 24 (empty -> .)
    ID              shift and go to state 3
    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14

    declaration                    shift and go to state 5
    body                           shift and go to state 40
    line                           shift and go to state 41
    empty                          shift and go to state 42
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    type                           shift and go to state 7

state 40

    (4) statement -> declaration LPAREN args RPAREN LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 43


state 41

    (6) body -> line . body
    (6) body -> . line body
    (7) body -> . empty
    (1) line -> . statement SEMICOLON
    (24) empty -> .
    (2) statement -> . ID EQUALS expression
    (3) statement -> . declaration EQUALS expression
    (4) statement -> . declaration LPAREN args RPAREN LBRACKET body RBRACKET
    (11) statement -> . expression
    (5) declaration -> . type ID
    (12) expression -> . expression PLUS expression
    (13) expression -> . expression MINUS expression
    (14) expression -> . expression TIMES expression
    (15) expression -> . expression DIVIDE expression
    (16) expression -> . MINUS expression
    (17) expression -> . LPAREN expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . NAME
    (20) type -> . INT
    (21) type -> . FLOAT
    (22) type -> . DOUBLE
    (23) type -> . CHAR

    RBRACKET        reduce using rule 24 (empty -> .)
    ID              shift and go to state 3
    MINUS           shift and go to state 8
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 9
    NAME            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14

    line                           shift and go to state 41
    body                           shift and go to state 44
    empty                          shift and go to state 42
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    type                           shift and go to state 7

state 42

    (7) body -> empty .

    RBRACKET        reduce using rule 7 (body -> empty .)


state 43

    (4) statement -> declaration LPAREN args RPAREN LBRACKET body RBRACKET .

    SEMICOLON       reduce using rule 4 (statement -> declaration LPAREN args RPAREN LBRACKET body RBRACKET .)


state 44

    (6) body -> line body .

    RBRACKET        reduce using rule 6 (body -> line body .)

