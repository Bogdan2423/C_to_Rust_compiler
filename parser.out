Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> function_declaration program
Rule 2     program -> empty
Rule 3     line -> statement SEMICOLON
Rule 4     line -> expression SEMICOLON
Rule 5     line -> loop_statement
Rule 6     line -> if_statement
Rule 7     statement -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
Rule 8     function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET
Rule 9     declaration -> type ID
Rule 10    body -> line body
Rule 11    body -> empty
Rule 12    if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
Rule 13    if_statement -> IF LPAREN expression RPAREN line else_statement
Rule 14    else_statement -> ELSE LBRACKET body RBRACKET
Rule 15    else_statement -> ELSE line
Rule 16    else_statement -> empty
Rule 17    loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
Rule 18    loop_statement -> WHILE LPAREN expression RPAREN line
Rule 19    loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
Rule 20    loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
Rule 21    args -> declaration COMMA args
Rule 22    args -> declaration
Rule 23    args -> empty
Rule 24    function_args -> expression COMMA function_args
Rule 25    function_args -> expression
Rule 26    function_args -> empty
Rule 27    statement -> RETURN ID
Rule 28    statement -> RETURN expression
Rule 29    expression -> ID LPAREN function_args RPAREN
Rule 30    expression -> expression compare_operator expression
Rule 31    expression -> PRINTF LPAREN STRING COMMA function_args RPAREN
Rule 32    expression -> PRINTF LPAREN STRING RPAREN
Rule 33    statement -> ID EQUALS expression
Rule 34    statement -> declaration EQUALS expression
Rule 35    statement -> ID INCREMENT
Rule 36    statement -> ID DECREMENT
Rule 37    compare_operator -> COMPARISON
Rule 38    compare_operator -> GREATER
Rule 39    compare_operator -> LESS
Rule 40    compare_operator -> LESSEQUAL
Rule 41    compare_operator -> GREATEREQUAL
Rule 42    expression -> expression math_operator expression
Rule 43    statement -> expression math_operator EQUALS expression
Rule 44    math_operator -> PLUS
Rule 45    math_operator -> MINUS
Rule 46    math_operator -> TIMES
Rule 47    math_operator -> DIVIDE
Rule 48    math_operator -> MODULO
Rule 49    expression -> LPAREN expression RPAREN
Rule 50    expression -> NUMBER
Rule 51    expression -> ID
Rule 52    type -> INT
Rule 53    type -> FLOAT
Rule 54    type -> DOUBLE
Rule 55    type -> CHAR
Rule 56    empty -> <empty>

Terminals, with rules where they appear

CHAR                 : 55
COMMA                : 21 24 31
COMPARISON           : 37
DECREMENT            : 36
DIVIDE               : 47
DOUBLE               : 54
ELSE                 : 14 15
EQUALS               : 33 34 43
FLOAT                : 53
FOR                  : 19 20
GREATER              : 38
GREATEREQUAL         : 41
ID                   : 7 8 9 27 29 33 35 36 51
IF                   : 12 13
INCREMENT            : 35
INT                  : 52
LBRACKET             : 7 8 12 14 17 19
LESS                 : 39
LESSEQUAL            : 40
LPAREN               : 7 8 12 13 17 18 19 20 29 31 32 49
MINUS                : 45
MODULO               : 48
NUMBER               : 50
PLUS                 : 44
PRINTF               : 31 32
RBRACKET             : 7 8 12 14 17 19
RETURN               : 27 28
RPAREN               : 7 8 12 13 17 18 19 20 29 31 32 49
SEMICOLON            : 3 4 19 19 20 20
STRING               : 31 32
TIMES                : 46
VOID                 : 7
WHILE                : 17 18
error                : 

Nonterminals, with rules where they appear

args                 : 7 8 21
body                 : 7 8 10 12 14 17 19
compare_operator     : 30
declaration          : 21 22 34
else_statement       : 12 13
empty                : 2 11 16 23 26
expression           : 4 12 13 17 18 19 20 24 25 28 30 30 33 34 42 42 43 43 49
function_args        : 24 29 31
function_declaration : 1
if_statement         : 6
line                 : 10 13 15 18 20
loop_statement       : 5
math_operator        : 42 43
program              : 1 0
statement            : 3 19 19 20 20
type                 : 8 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_declaration program
    (2) program -> . empty
    (8) function_declaration -> . type ID LPAREN args RPAREN LBRACKET body RBRACKET
    (56) empty -> .
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    $end            reduce using rule 56 (empty -> .)
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    program                        shift and go to state 1
    function_declaration           shift and go to state 2
    empty                          shift and go to state 3
    type                           shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> function_declaration . program
    (1) program -> . function_declaration program
    (2) program -> . empty
    (8) function_declaration -> . type ID LPAREN args RPAREN LBRACKET body RBRACKET
    (56) empty -> .
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    $end            reduce using rule 56 (empty -> .)
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    function_declaration           shift and go to state 2
    program                        shift and go to state 9
    empty                          shift and go to state 3
    type                           shift and go to state 4

state 3

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 4

    (8) function_declaration -> type . ID LPAREN args RPAREN LBRACKET body RBRACKET

    ID              shift and go to state 10


state 5

    (52) type -> INT .

    ID              reduce using rule 52 (type -> INT .)


state 6

    (53) type -> FLOAT .

    ID              reduce using rule 53 (type -> FLOAT .)


state 7

    (54) type -> DOUBLE .

    ID              reduce using rule 54 (type -> DOUBLE .)


state 8

    (55) type -> CHAR .

    ID              reduce using rule 55 (type -> CHAR .)


state 9

    (1) program -> function_declaration program .

    $end            reduce using rule 1 (program -> function_declaration program .)


state 10

    (8) function_declaration -> type ID . LPAREN args RPAREN LBRACKET body RBRACKET

    LPAREN          shift and go to state 11


state 11

    (8) function_declaration -> type ID LPAREN . args RPAREN LBRACKET body RBRACKET
    (21) args -> . declaration COMMA args
    (22) args -> . declaration
    (23) args -> . empty
    (9) declaration -> . type ID
    (56) empty -> .
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    RPAREN          reduce using rule 56 (empty -> .)
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    type                           shift and go to state 12
    args                           shift and go to state 13
    declaration                    shift and go to state 14
    empty                          shift and go to state 15

state 12

    (9) declaration -> type . ID

    ID              shift and go to state 16


state 13

    (8) function_declaration -> type ID LPAREN args . RPAREN LBRACKET body RBRACKET

    RPAREN          shift and go to state 17


state 14

    (21) args -> declaration . COMMA args
    (22) args -> declaration .

    COMMA           shift and go to state 18
    RPAREN          reduce using rule 22 (args -> declaration .)


state 15

    (23) args -> empty .

    RPAREN          reduce using rule 23 (args -> empty .)


state 16

    (9) declaration -> type ID .

    COMMA           reduce using rule 9 (declaration -> type ID .)
    RPAREN          reduce using rule 9 (declaration -> type ID .)
    EQUALS          reduce using rule 9 (declaration -> type ID .)


state 17

    (8) function_declaration -> type ID LPAREN args RPAREN . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 19


state 18

    (21) args -> declaration COMMA . args
    (21) args -> . declaration COMMA args
    (22) args -> . declaration
    (23) args -> . empty
    (9) declaration -> . type ID
    (56) empty -> .
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    RPAREN          reduce using rule 56 (empty -> .)
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    declaration                    shift and go to state 14
    args                           shift and go to state 20
    empty                          shift and go to state 15
    type                           shift and go to state 12

state 19

    (8) function_declaration -> type ID LPAREN args RPAREN LBRACKET . body RBRACKET
    (10) body -> . line body
    (11) body -> . empty
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (56) empty -> .
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    RBRACKET        reduce using rule 56 (empty -> .)
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    type                           shift and go to state 12
    body                           shift and go to state 23
    line                           shift and go to state 24
    empty                          shift and go to state 25
    statement                      shift and go to state 26
    expression                     shift and go to state 27
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32

state 20

    (21) args -> declaration COMMA args .

    RPAREN          reduce using rule 21 (args -> declaration COMMA args .)


state 21

    (33) statement -> ID . EQUALS expression
    (35) statement -> ID . INCREMENT
    (36) statement -> ID . DECREMENT
    (29) expression -> ID . LPAREN function_args RPAREN
    (51) expression -> ID .

    EQUALS          shift and go to state 38
    INCREMENT       shift and go to state 39
    DECREMENT       shift and go to state 40
    LPAREN          shift and go to state 41
    SEMICOLON       reduce using rule 51 (expression -> ID .)
    PLUS            reduce using rule 51 (expression -> ID .)
    MINUS           reduce using rule 51 (expression -> ID .)
    TIMES           reduce using rule 51 (expression -> ID .)
    DIVIDE          reduce using rule 51 (expression -> ID .)
    MODULO          reduce using rule 51 (expression -> ID .)
    COMPARISON      reduce using rule 51 (expression -> ID .)
    GREATER         reduce using rule 51 (expression -> ID .)
    LESS            reduce using rule 51 (expression -> ID .)
    LESSEQUAL       reduce using rule 51 (expression -> ID .)
    GREATEREQUAL    reduce using rule 51 (expression -> ID .)


state 22

    (49) expression -> LPAREN . expression RPAREN
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 42

state 23

    (8) function_declaration -> type ID LPAREN args RPAREN LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 44


state 24

    (10) body -> line . body
    (10) body -> . line body
    (11) body -> . empty
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (56) empty -> .
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    RBRACKET        reduce using rule 56 (empty -> .)
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    line                           shift and go to state 24
    body                           shift and go to state 45
    empty                          shift and go to state 25
    statement                      shift and go to state 26
    expression                     shift and go to state 27
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 25

    (11) body -> empty .

    RBRACKET        reduce using rule 11 (body -> empty .)


state 26

    (3) line -> statement . SEMICOLON

    SEMICOLON       shift and go to state 46


state 27

    (4) line -> expression . SEMICOLON
    (43) statement -> expression . math_operator EQUALS expression
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL

    SEMICOLON       shift and go to state 47
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59

    math_operator                  shift and go to state 48
    compare_operator               shift and go to state 49

state 28

    (5) line -> loop_statement .

    VOID            reduce using rule 5 (line -> loop_statement .)
    RETURN          reduce using rule 5 (line -> loop_statement .)
    ID              reduce using rule 5 (line -> loop_statement .)
    PRINTF          reduce using rule 5 (line -> loop_statement .)
    LPAREN          reduce using rule 5 (line -> loop_statement .)
    NUMBER          reduce using rule 5 (line -> loop_statement .)
    WHILE           reduce using rule 5 (line -> loop_statement .)
    FOR             reduce using rule 5 (line -> loop_statement .)
    IF              reduce using rule 5 (line -> loop_statement .)
    INT             reduce using rule 5 (line -> loop_statement .)
    FLOAT           reduce using rule 5 (line -> loop_statement .)
    DOUBLE          reduce using rule 5 (line -> loop_statement .)
    CHAR            reduce using rule 5 (line -> loop_statement .)
    RBRACKET        reduce using rule 5 (line -> loop_statement .)
    ELSE            reduce using rule 5 (line -> loop_statement .)


state 29

    (6) line -> if_statement .

    VOID            reduce using rule 6 (line -> if_statement .)
    RETURN          reduce using rule 6 (line -> if_statement .)
    ID              reduce using rule 6 (line -> if_statement .)
    PRINTF          reduce using rule 6 (line -> if_statement .)
    LPAREN          reduce using rule 6 (line -> if_statement .)
    NUMBER          reduce using rule 6 (line -> if_statement .)
    WHILE           reduce using rule 6 (line -> if_statement .)
    FOR             reduce using rule 6 (line -> if_statement .)
    IF              reduce using rule 6 (line -> if_statement .)
    INT             reduce using rule 6 (line -> if_statement .)
    FLOAT           reduce using rule 6 (line -> if_statement .)
    DOUBLE          reduce using rule 6 (line -> if_statement .)
    CHAR            reduce using rule 6 (line -> if_statement .)
    RBRACKET        reduce using rule 6 (line -> if_statement .)
    ELSE            reduce using rule 6 (line -> if_statement .)


state 30

    (7) statement -> VOID . ID LPAREN args RPAREN LBRACKET body RBRACKET

    ID              shift and go to state 60


state 31

    (27) statement -> RETURN . ID
    (28) statement -> RETURN . expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 61
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 62

state 32

    (34) statement -> declaration . EQUALS expression

    EQUALS          shift and go to state 63


state 33

    (31) expression -> PRINTF . LPAREN STRING COMMA function_args RPAREN
    (32) expression -> PRINTF . LPAREN STRING RPAREN

    LPAREN          shift and go to state 64


state 34

    (50) expression -> NUMBER .

    SEMICOLON       reduce using rule 50 (expression -> NUMBER .)
    PLUS            reduce using rule 50 (expression -> NUMBER .)
    MINUS           reduce using rule 50 (expression -> NUMBER .)
    TIMES           reduce using rule 50 (expression -> NUMBER .)
    DIVIDE          reduce using rule 50 (expression -> NUMBER .)
    MODULO          reduce using rule 50 (expression -> NUMBER .)
    COMPARISON      reduce using rule 50 (expression -> NUMBER .)
    GREATER         reduce using rule 50 (expression -> NUMBER .)
    LESS            reduce using rule 50 (expression -> NUMBER .)
    LESSEQUAL       reduce using rule 50 (expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 50 (expression -> NUMBER .)
    RPAREN          reduce using rule 50 (expression -> NUMBER .)
    COMMA           reduce using rule 50 (expression -> NUMBER .)


state 35

    (17) loop_statement -> WHILE . LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> WHILE . LPAREN expression RPAREN line

    LPAREN          shift and go to state 65


state 36

    (19) loop_statement -> FOR . LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> FOR . LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line

    LPAREN          shift and go to state 66


state 37

    (12) if_statement -> IF . LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> IF . LPAREN expression RPAREN line else_statement

    LPAREN          shift and go to state 67


state 38

    (33) statement -> ID EQUALS . expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 68

state 39

    (35) statement -> ID INCREMENT .

    SEMICOLON       reduce using rule 35 (statement -> ID INCREMENT .)
    RPAREN          reduce using rule 35 (statement -> ID INCREMENT .)


state 40

    (36) statement -> ID DECREMENT .

    SEMICOLON       reduce using rule 36 (statement -> ID DECREMENT .)
    RPAREN          reduce using rule 36 (statement -> ID DECREMENT .)


state 41

    (29) expression -> ID LPAREN . function_args RPAREN
    (24) function_args -> . expression COMMA function_args
    (25) function_args -> . expression
    (26) function_args -> . empty
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (56) empty -> .

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    RPAREN          reduce using rule 56 (empty -> .)

    function_args                  shift and go to state 69
    expression                     shift and go to state 70
    empty                          shift and go to state 71

state 42

    (49) expression -> LPAREN expression . RPAREN
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

    RPAREN          shift and go to state 72
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

    compare_operator               shift and go to state 49
    math_operator                  shift and go to state 73

state 43

    (29) expression -> ID . LPAREN function_args RPAREN
    (51) expression -> ID .

    LPAREN          shift and go to state 41
    RPAREN          reduce using rule 51 (expression -> ID .)
    COMPARISON      reduce using rule 51 (expression -> ID .)
    GREATER         reduce using rule 51 (expression -> ID .)
    LESS            reduce using rule 51 (expression -> ID .)
    LESSEQUAL       reduce using rule 51 (expression -> ID .)
    GREATEREQUAL    reduce using rule 51 (expression -> ID .)
    PLUS            reduce using rule 51 (expression -> ID .)
    MINUS           reduce using rule 51 (expression -> ID .)
    TIMES           reduce using rule 51 (expression -> ID .)
    DIVIDE          reduce using rule 51 (expression -> ID .)
    MODULO          reduce using rule 51 (expression -> ID .)
    SEMICOLON       reduce using rule 51 (expression -> ID .)
    COMMA           reduce using rule 51 (expression -> ID .)


state 44

    (8) function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .

    INT             reduce using rule 8 (function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 8 (function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 8 (function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    CHAR            reduce using rule 8 (function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    $end            reduce using rule 8 (function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .)


state 45

    (10) body -> line body .

    RBRACKET        reduce using rule 10 (body -> line body .)


state 46

    (3) line -> statement SEMICOLON .

    VOID            reduce using rule 3 (line -> statement SEMICOLON .)
    RETURN          reduce using rule 3 (line -> statement SEMICOLON .)
    ID              reduce using rule 3 (line -> statement SEMICOLON .)
    PRINTF          reduce using rule 3 (line -> statement SEMICOLON .)
    LPAREN          reduce using rule 3 (line -> statement SEMICOLON .)
    NUMBER          reduce using rule 3 (line -> statement SEMICOLON .)
    WHILE           reduce using rule 3 (line -> statement SEMICOLON .)
    FOR             reduce using rule 3 (line -> statement SEMICOLON .)
    IF              reduce using rule 3 (line -> statement SEMICOLON .)
    INT             reduce using rule 3 (line -> statement SEMICOLON .)
    FLOAT           reduce using rule 3 (line -> statement SEMICOLON .)
    DOUBLE          reduce using rule 3 (line -> statement SEMICOLON .)
    CHAR            reduce using rule 3 (line -> statement SEMICOLON .)
    RBRACKET        reduce using rule 3 (line -> statement SEMICOLON .)
    ELSE            reduce using rule 3 (line -> statement SEMICOLON .)


state 47

    (4) line -> expression SEMICOLON .

    VOID            reduce using rule 4 (line -> expression SEMICOLON .)
    RETURN          reduce using rule 4 (line -> expression SEMICOLON .)
    ID              reduce using rule 4 (line -> expression SEMICOLON .)
    PRINTF          reduce using rule 4 (line -> expression SEMICOLON .)
    LPAREN          reduce using rule 4 (line -> expression SEMICOLON .)
    NUMBER          reduce using rule 4 (line -> expression SEMICOLON .)
    WHILE           reduce using rule 4 (line -> expression SEMICOLON .)
    FOR             reduce using rule 4 (line -> expression SEMICOLON .)
    IF              reduce using rule 4 (line -> expression SEMICOLON .)
    INT             reduce using rule 4 (line -> expression SEMICOLON .)
    FLOAT           reduce using rule 4 (line -> expression SEMICOLON .)
    DOUBLE          reduce using rule 4 (line -> expression SEMICOLON .)
    CHAR            reduce using rule 4 (line -> expression SEMICOLON .)
    RBRACKET        reduce using rule 4 (line -> expression SEMICOLON .)
    ELSE            reduce using rule 4 (line -> expression SEMICOLON .)


state 48

    (43) statement -> expression math_operator . EQUALS expression
    (42) expression -> expression math_operator . expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    EQUALS          shift and go to state 75
    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 74

state 49

    (30) expression -> expression compare_operator . expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 76

state 50

    (44) math_operator -> PLUS .

    EQUALS          reduce using rule 44 (math_operator -> PLUS .)
    ID              reduce using rule 44 (math_operator -> PLUS .)
    PRINTF          reduce using rule 44 (math_operator -> PLUS .)
    LPAREN          reduce using rule 44 (math_operator -> PLUS .)
    NUMBER          reduce using rule 44 (math_operator -> PLUS .)


state 51

    (45) math_operator -> MINUS .

    EQUALS          reduce using rule 45 (math_operator -> MINUS .)
    ID              reduce using rule 45 (math_operator -> MINUS .)
    PRINTF          reduce using rule 45 (math_operator -> MINUS .)
    LPAREN          reduce using rule 45 (math_operator -> MINUS .)
    NUMBER          reduce using rule 45 (math_operator -> MINUS .)


state 52

    (46) math_operator -> TIMES .

    EQUALS          reduce using rule 46 (math_operator -> TIMES .)
    ID              reduce using rule 46 (math_operator -> TIMES .)
    PRINTF          reduce using rule 46 (math_operator -> TIMES .)
    LPAREN          reduce using rule 46 (math_operator -> TIMES .)
    NUMBER          reduce using rule 46 (math_operator -> TIMES .)


state 53

    (47) math_operator -> DIVIDE .

    EQUALS          reduce using rule 47 (math_operator -> DIVIDE .)
    ID              reduce using rule 47 (math_operator -> DIVIDE .)
    PRINTF          reduce using rule 47 (math_operator -> DIVIDE .)
    LPAREN          reduce using rule 47 (math_operator -> DIVIDE .)
    NUMBER          reduce using rule 47 (math_operator -> DIVIDE .)


state 54

    (48) math_operator -> MODULO .

    EQUALS          reduce using rule 48 (math_operator -> MODULO .)
    ID              reduce using rule 48 (math_operator -> MODULO .)
    PRINTF          reduce using rule 48 (math_operator -> MODULO .)
    LPAREN          reduce using rule 48 (math_operator -> MODULO .)
    NUMBER          reduce using rule 48 (math_operator -> MODULO .)


state 55

    (37) compare_operator -> COMPARISON .

    ID              reduce using rule 37 (compare_operator -> COMPARISON .)
    PRINTF          reduce using rule 37 (compare_operator -> COMPARISON .)
    LPAREN          reduce using rule 37 (compare_operator -> COMPARISON .)
    NUMBER          reduce using rule 37 (compare_operator -> COMPARISON .)


state 56

    (38) compare_operator -> GREATER .

    ID              reduce using rule 38 (compare_operator -> GREATER .)
    PRINTF          reduce using rule 38 (compare_operator -> GREATER .)
    LPAREN          reduce using rule 38 (compare_operator -> GREATER .)
    NUMBER          reduce using rule 38 (compare_operator -> GREATER .)


state 57

    (39) compare_operator -> LESS .

    ID              reduce using rule 39 (compare_operator -> LESS .)
    PRINTF          reduce using rule 39 (compare_operator -> LESS .)
    LPAREN          reduce using rule 39 (compare_operator -> LESS .)
    NUMBER          reduce using rule 39 (compare_operator -> LESS .)


state 58

    (40) compare_operator -> LESSEQUAL .

    ID              reduce using rule 40 (compare_operator -> LESSEQUAL .)
    PRINTF          reduce using rule 40 (compare_operator -> LESSEQUAL .)
    LPAREN          reduce using rule 40 (compare_operator -> LESSEQUAL .)
    NUMBER          reduce using rule 40 (compare_operator -> LESSEQUAL .)


state 59

    (41) compare_operator -> GREATEREQUAL .

    ID              reduce using rule 41 (compare_operator -> GREATEREQUAL .)
    PRINTF          reduce using rule 41 (compare_operator -> GREATEREQUAL .)
    LPAREN          reduce using rule 41 (compare_operator -> GREATEREQUAL .)
    NUMBER          reduce using rule 41 (compare_operator -> GREATEREQUAL .)


state 60

    (7) statement -> VOID ID . LPAREN args RPAREN LBRACKET body RBRACKET

    LPAREN          shift and go to state 77


state 61

    (27) statement -> RETURN ID .
    (29) expression -> ID . LPAREN function_args RPAREN
    (51) expression -> ID .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 27 (statement -> RETURN ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 27 (statement -> RETURN ID .)
    SEMICOLON       reduce using rule 27 (statement -> RETURN ID .)
    RPAREN          reduce using rule 27 (statement -> RETURN ID .)
    LPAREN          shift and go to state 41
    COMPARISON      reduce using rule 51 (expression -> ID .)
    GREATER         reduce using rule 51 (expression -> ID .)
    LESS            reduce using rule 51 (expression -> ID .)
    LESSEQUAL       reduce using rule 51 (expression -> ID .)
    GREATEREQUAL    reduce using rule 51 (expression -> ID .)
    PLUS            reduce using rule 51 (expression -> ID .)
    MINUS           reduce using rule 51 (expression -> ID .)
    TIMES           reduce using rule 51 (expression -> ID .)
    DIVIDE          reduce using rule 51 (expression -> ID .)
    MODULO          reduce using rule 51 (expression -> ID .)

  ! SEMICOLON       [ reduce using rule 51 (expression -> ID .) ]
  ! RPAREN          [ reduce using rule 51 (expression -> ID .) ]


state 62

    (28) statement -> RETURN expression .
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

    SEMICOLON       reduce using rule 28 (statement -> RETURN expression .)
    RPAREN          reduce using rule 28 (statement -> RETURN expression .)
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

    compare_operator               shift and go to state 49
    math_operator                  shift and go to state 73

state 63

    (34) statement -> declaration EQUALS . expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 78

state 64

    (31) expression -> PRINTF LPAREN . STRING COMMA function_args RPAREN
    (32) expression -> PRINTF LPAREN . STRING RPAREN

    STRING          shift and go to state 79


state 65

    (17) loop_statement -> WHILE LPAREN . expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> WHILE LPAREN . expression RPAREN line
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 80

state 66

    (19) loop_statement -> FOR LPAREN . statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> FOR LPAREN . statement SEMICOLON expression SEMICOLON statement RPAREN line
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (9) declaration -> . type ID
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    statement                      shift and go to state 81
    expression                     shift and go to state 82
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 67

    (12) if_statement -> IF LPAREN . expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> IF LPAREN . expression RPAREN line else_statement
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 83

state 68

    (33) statement -> ID EQUALS expression .
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

    SEMICOLON       reduce using rule 33 (statement -> ID EQUALS expression .)
    RPAREN          reduce using rule 33 (statement -> ID EQUALS expression .)
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

    compare_operator               shift and go to state 49
    math_operator                  shift and go to state 73

state 69

    (29) expression -> ID LPAREN function_args . RPAREN

    RPAREN          shift and go to state 84


state 70

    (24) function_args -> expression . COMMA function_args
    (25) function_args -> expression .
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

    COMMA           shift and go to state 85
    RPAREN          reduce using rule 25 (function_args -> expression .)
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

    compare_operator               shift and go to state 49
    math_operator                  shift and go to state 73

state 71

    (26) function_args -> empty .

    RPAREN          reduce using rule 26 (function_args -> empty .)


state 72

    (49) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    COMPARISON      reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 49 (expression -> LPAREN expression RPAREN .)


state 73

    (42) expression -> expression math_operator . expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 74

state 74

    (42) expression -> expression math_operator expression .
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

  ! shift/reduce conflict for COMPARISON resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    SEMICOLON       reduce using rule 42 (expression -> expression math_operator expression .)
    RPAREN          reduce using rule 42 (expression -> expression math_operator expression .)
    COMMA           reduce using rule 42 (expression -> expression math_operator expression .)
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

  ! PLUS            [ reduce using rule 42 (expression -> expression math_operator expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression math_operator expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression math_operator expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression math_operator expression .) ]
  ! MODULO          [ reduce using rule 42 (expression -> expression math_operator expression .) ]
  ! COMPARISON      [ reduce using rule 42 (expression -> expression math_operator expression .) ]
  ! GREATER         [ reduce using rule 42 (expression -> expression math_operator expression .) ]
  ! LESS            [ reduce using rule 42 (expression -> expression math_operator expression .) ]
  ! LESSEQUAL       [ reduce using rule 42 (expression -> expression math_operator expression .) ]
  ! GREATEREQUAL    [ reduce using rule 42 (expression -> expression math_operator expression .) ]

    math_operator                  shift and go to state 73
    compare_operator               shift and go to state 49

state 75

    (43) statement -> expression math_operator EQUALS . expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 86

state 76

    (30) expression -> expression compare_operator expression .
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

  ! shift/reduce conflict for COMPARISON resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    SEMICOLON       reduce using rule 30 (expression -> expression compare_operator expression .)
    RPAREN          reduce using rule 30 (expression -> expression compare_operator expression .)
    COMMA           reduce using rule 30 (expression -> expression compare_operator expression .)
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

  ! PLUS            [ reduce using rule 30 (expression -> expression compare_operator expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression compare_operator expression .) ]
  ! TIMES           [ reduce using rule 30 (expression -> expression compare_operator expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression compare_operator expression .) ]
  ! MODULO          [ reduce using rule 30 (expression -> expression compare_operator expression .) ]
  ! COMPARISON      [ reduce using rule 30 (expression -> expression compare_operator expression .) ]
  ! GREATER         [ reduce using rule 30 (expression -> expression compare_operator expression .) ]
  ! LESS            [ reduce using rule 30 (expression -> expression compare_operator expression .) ]
  ! LESSEQUAL       [ reduce using rule 30 (expression -> expression compare_operator expression .) ]
  ! GREATEREQUAL    [ reduce using rule 30 (expression -> expression compare_operator expression .) ]

    compare_operator               shift and go to state 49
    math_operator                  shift and go to state 73

state 77

    (7) statement -> VOID ID LPAREN . args RPAREN LBRACKET body RBRACKET
    (21) args -> . declaration COMMA args
    (22) args -> . declaration
    (23) args -> . empty
    (9) declaration -> . type ID
    (56) empty -> .
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    RPAREN          reduce using rule 56 (empty -> .)
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    args                           shift and go to state 87
    declaration                    shift and go to state 14
    empty                          shift and go to state 15
    type                           shift and go to state 12

state 78

    (34) statement -> declaration EQUALS expression .
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

    SEMICOLON       reduce using rule 34 (statement -> declaration EQUALS expression .)
    RPAREN          reduce using rule 34 (statement -> declaration EQUALS expression .)
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

    compare_operator               shift and go to state 49
    math_operator                  shift and go to state 73

state 79

    (31) expression -> PRINTF LPAREN STRING . COMMA function_args RPAREN
    (32) expression -> PRINTF LPAREN STRING . RPAREN

    COMMA           shift and go to state 88
    RPAREN          shift and go to state 89


state 80

    (17) loop_statement -> WHILE LPAREN expression . RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> WHILE LPAREN expression . RPAREN line
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

    RPAREN          shift and go to state 90
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

    compare_operator               shift and go to state 49
    math_operator                  shift and go to state 73

state 81

    (19) loop_statement -> FOR LPAREN statement . SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> FOR LPAREN statement . SEMICOLON expression SEMICOLON statement RPAREN line

    SEMICOLON       shift and go to state 91


state 82

    (43) statement -> expression . math_operator EQUALS expression
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59

    math_operator                  shift and go to state 48
    compare_operator               shift and go to state 49

state 83

    (12) if_statement -> IF LPAREN expression . RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> IF LPAREN expression . RPAREN line else_statement
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

    RPAREN          shift and go to state 92
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

    compare_operator               shift and go to state 49
    math_operator                  shift and go to state 73

state 84

    (29) expression -> ID LPAREN function_args RPAREN .

    SEMICOLON       reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    PLUS            reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    MINUS           reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    TIMES           reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    DIVIDE          reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    MODULO          reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    COMPARISON      reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    GREATER         reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    LESS            reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    LESSEQUAL       reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    GREATEREQUAL    reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    RPAREN          reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)
    COMMA           reduce using rule 29 (expression -> ID LPAREN function_args RPAREN .)


state 85

    (24) function_args -> expression COMMA . function_args
    (24) function_args -> . expression COMMA function_args
    (25) function_args -> . expression
    (26) function_args -> . empty
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (56) empty -> .

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    RPAREN          reduce using rule 56 (empty -> .)

    expression                     shift and go to state 70
    function_args                  shift and go to state 93
    empty                          shift and go to state 71

state 86

    (43) statement -> expression math_operator EQUALS expression .
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

    SEMICOLON       reduce using rule 43 (statement -> expression math_operator EQUALS expression .)
    RPAREN          reduce using rule 43 (statement -> expression math_operator EQUALS expression .)
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

    math_operator                  shift and go to state 73
    compare_operator               shift and go to state 49

state 87

    (7) statement -> VOID ID LPAREN args . RPAREN LBRACKET body RBRACKET

    RPAREN          shift and go to state 94


state 88

    (31) expression -> PRINTF LPAREN STRING COMMA . function_args RPAREN
    (24) function_args -> . expression COMMA function_args
    (25) function_args -> . expression
    (26) function_args -> . empty
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (56) empty -> .

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    RPAREN          reduce using rule 56 (empty -> .)

    function_args                  shift and go to state 95
    expression                     shift and go to state 70
    empty                          shift and go to state 71

state 89

    (32) expression -> PRINTF LPAREN STRING RPAREN .

    SEMICOLON       reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    PLUS            reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    MINUS           reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    TIMES           reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    DIVIDE          reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    MODULO          reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    COMPARISON      reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    GREATER         reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    LESS            reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    LESSEQUAL       reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    GREATEREQUAL    reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    RPAREN          reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)
    COMMA           reduce using rule 32 (expression -> PRINTF LPAREN STRING RPAREN .)


state 90

    (17) loop_statement -> WHILE LPAREN expression RPAREN . LBRACKET body RBRACKET
    (18) loop_statement -> WHILE LPAREN expression RPAREN . line
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    LBRACKET        shift and go to state 96
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    expression                     shift and go to state 27
    line                           shift and go to state 97
    statement                      shift and go to state 26
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 91

    (19) loop_statement -> FOR LPAREN statement SEMICOLON . expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> FOR LPAREN statement SEMICOLON . expression SEMICOLON statement RPAREN line
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 43
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34

    expression                     shift and go to state 98

state 92

    (12) if_statement -> IF LPAREN expression RPAREN . LBRACKET body RBRACKET else_statement
    (13) if_statement -> IF LPAREN expression RPAREN . line else_statement
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    LBRACKET        shift and go to state 99
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    expression                     shift and go to state 27
    line                           shift and go to state 100
    statement                      shift and go to state 26
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 93

    (24) function_args -> expression COMMA function_args .

    RPAREN          reduce using rule 24 (function_args -> expression COMMA function_args .)


state 94

    (7) statement -> VOID ID LPAREN args RPAREN . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 101


state 95

    (31) expression -> PRINTF LPAREN STRING COMMA function_args . RPAREN

    RPAREN          shift and go to state 102


state 96

    (17) loop_statement -> WHILE LPAREN expression RPAREN LBRACKET . body RBRACKET
    (10) body -> . line body
    (11) body -> . empty
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (56) empty -> .
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    RBRACKET        reduce using rule 56 (empty -> .)
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    expression                     shift and go to state 27
    body                           shift and go to state 103
    line                           shift and go to state 24
    empty                          shift and go to state 25
    statement                      shift and go to state 26
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 97

    (18) loop_statement -> WHILE LPAREN expression RPAREN line .

    VOID            reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    RETURN          reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    ID              reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    PRINTF          reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    LPAREN          reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    NUMBER          reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    WHILE           reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    FOR             reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    IF              reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    INT             reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    FLOAT           reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    DOUBLE          reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    CHAR            reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    RBRACKET        reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    ELSE            reduce using rule 18 (loop_statement -> WHILE LPAREN expression RPAREN line .)


state 98

    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression . SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> FOR LPAREN statement SEMICOLON expression . SEMICOLON statement RPAREN line
    (30) expression -> expression . compare_operator expression
    (42) expression -> expression . math_operator expression
    (37) compare_operator -> . COMPARISON
    (38) compare_operator -> . GREATER
    (39) compare_operator -> . LESS
    (40) compare_operator -> . LESSEQUAL
    (41) compare_operator -> . GREATEREQUAL
    (44) math_operator -> . PLUS
    (45) math_operator -> . MINUS
    (46) math_operator -> . TIMES
    (47) math_operator -> . DIVIDE
    (48) math_operator -> . MODULO

    SEMICOLON       shift and go to state 104
    COMPARISON      shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    LESSEQUAL       shift and go to state 58
    GREATEREQUAL    shift and go to state 59
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULO          shift and go to state 54

    compare_operator               shift and go to state 49
    math_operator                  shift and go to state 73

state 99

    (12) if_statement -> IF LPAREN expression RPAREN LBRACKET . body RBRACKET else_statement
    (10) body -> . line body
    (11) body -> . empty
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (56) empty -> .
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    RBRACKET        reduce using rule 56 (empty -> .)
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    expression                     shift and go to state 27
    body                           shift and go to state 105
    line                           shift and go to state 24
    empty                          shift and go to state 25
    statement                      shift and go to state 26
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 100

    (13) if_statement -> IF LPAREN expression RPAREN line . else_statement
    (14) else_statement -> . ELSE LBRACKET body RBRACKET
    (15) else_statement -> . ELSE line
    (16) else_statement -> . empty
    (56) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 107
    VOID            reduce using rule 56 (empty -> .)
    RETURN          reduce using rule 56 (empty -> .)
    ID              reduce using rule 56 (empty -> .)
    PRINTF          reduce using rule 56 (empty -> .)
    LPAREN          reduce using rule 56 (empty -> .)
    NUMBER          reduce using rule 56 (empty -> .)
    WHILE           reduce using rule 56 (empty -> .)
    FOR             reduce using rule 56 (empty -> .)
    IF              reduce using rule 56 (empty -> .)
    INT             reduce using rule 56 (empty -> .)
    FLOAT           reduce using rule 56 (empty -> .)
    DOUBLE          reduce using rule 56 (empty -> .)
    CHAR            reduce using rule 56 (empty -> .)
    RBRACKET        reduce using rule 56 (empty -> .)

  ! ELSE            [ reduce using rule 56 (empty -> .) ]

    else_statement                 shift and go to state 106
    empty                          shift and go to state 108

state 101

    (7) statement -> VOID ID LPAREN args RPAREN LBRACKET . body RBRACKET
    (10) body -> . line body
    (11) body -> . empty
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (56) empty -> .
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    RBRACKET        reduce using rule 56 (empty -> .)
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    body                           shift and go to state 109
    line                           shift and go to state 24
    empty                          shift and go to state 25
    statement                      shift and go to state 26
    expression                     shift and go to state 27
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 102

    (31) expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .

    SEMICOLON       reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    PLUS            reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    MINUS           reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    TIMES           reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    DIVIDE          reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    MODULO          reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    COMPARISON      reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    GREATER         reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    LESS            reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    LESSEQUAL       reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    GREATEREQUAL    reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    RPAREN          reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    COMMA           reduce using rule 31 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)


state 103

    (17) loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 110


state 104

    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON . statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON . statement RPAREN line
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (9) declaration -> . type ID
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    statement                      shift and go to state 111
    expression                     shift and go to state 82
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 105

    (12) if_statement -> IF LPAREN expression RPAREN LBRACKET body . RBRACKET else_statement

    RBRACKET        shift and go to state 112


state 106

    (13) if_statement -> IF LPAREN expression RPAREN line else_statement .

    VOID            reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    RETURN          reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    ID              reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    PRINTF          reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    LPAREN          reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    NUMBER          reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    WHILE           reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    FOR             reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    IF              reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    INT             reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    FLOAT           reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    DOUBLE          reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    CHAR            reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    RBRACKET        reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    ELSE            reduce using rule 13 (if_statement -> IF LPAREN expression RPAREN line else_statement .)


state 107

    (14) else_statement -> ELSE . LBRACKET body RBRACKET
    (15) else_statement -> ELSE . line
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    LBRACKET        shift and go to state 113
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    line                           shift and go to state 114
    statement                      shift and go to state 26
    expression                     shift and go to state 27
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 108

    (16) else_statement -> empty .

    VOID            reduce using rule 16 (else_statement -> empty .)
    RETURN          reduce using rule 16 (else_statement -> empty .)
    ID              reduce using rule 16 (else_statement -> empty .)
    PRINTF          reduce using rule 16 (else_statement -> empty .)
    LPAREN          reduce using rule 16 (else_statement -> empty .)
    NUMBER          reduce using rule 16 (else_statement -> empty .)
    WHILE           reduce using rule 16 (else_statement -> empty .)
    FOR             reduce using rule 16 (else_statement -> empty .)
    IF              reduce using rule 16 (else_statement -> empty .)
    INT             reduce using rule 16 (else_statement -> empty .)
    FLOAT           reduce using rule 16 (else_statement -> empty .)
    DOUBLE          reduce using rule 16 (else_statement -> empty .)
    CHAR            reduce using rule 16 (else_statement -> empty .)
    RBRACKET        reduce using rule 16 (else_statement -> empty .)
    ELSE            reduce using rule 16 (else_statement -> empty .)


state 109

    (7) statement -> VOID ID LPAREN args RPAREN LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 115


state 110

    (17) loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .

    VOID            reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    RETURN          reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    ID              reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    PRINTF          reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    LPAREN          reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    NUMBER          reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    WHILE           reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    FOR             reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    IF              reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    INT             reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    CHAR            reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    ELSE            reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)


state 111

    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement . RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement . RPAREN line

    RPAREN          shift and go to state 116


state 112

    (12) if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET . else_statement
    (14) else_statement -> . ELSE LBRACKET body RBRACKET
    (15) else_statement -> . ELSE line
    (16) else_statement -> . empty
    (56) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 107
    VOID            reduce using rule 56 (empty -> .)
    RETURN          reduce using rule 56 (empty -> .)
    ID              reduce using rule 56 (empty -> .)
    PRINTF          reduce using rule 56 (empty -> .)
    LPAREN          reduce using rule 56 (empty -> .)
    NUMBER          reduce using rule 56 (empty -> .)
    WHILE           reduce using rule 56 (empty -> .)
    FOR             reduce using rule 56 (empty -> .)
    IF              reduce using rule 56 (empty -> .)
    INT             reduce using rule 56 (empty -> .)
    FLOAT           reduce using rule 56 (empty -> .)
    DOUBLE          reduce using rule 56 (empty -> .)
    CHAR            reduce using rule 56 (empty -> .)
    RBRACKET        reduce using rule 56 (empty -> .)

  ! ELSE            [ reduce using rule 56 (empty -> .) ]

    else_statement                 shift and go to state 117
    empty                          shift and go to state 108

state 113

    (14) else_statement -> ELSE LBRACKET . body RBRACKET
    (10) body -> . line body
    (11) body -> . empty
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (56) empty -> .
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    RBRACKET        reduce using rule 56 (empty -> .)
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    body                           shift and go to state 118
    line                           shift and go to state 24
    empty                          shift and go to state 25
    statement                      shift and go to state 26
    expression                     shift and go to state 27
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 114

    (15) else_statement -> ELSE line .

    VOID            reduce using rule 15 (else_statement -> ELSE line .)
    RETURN          reduce using rule 15 (else_statement -> ELSE line .)
    ID              reduce using rule 15 (else_statement -> ELSE line .)
    PRINTF          reduce using rule 15 (else_statement -> ELSE line .)
    LPAREN          reduce using rule 15 (else_statement -> ELSE line .)
    NUMBER          reduce using rule 15 (else_statement -> ELSE line .)
    WHILE           reduce using rule 15 (else_statement -> ELSE line .)
    FOR             reduce using rule 15 (else_statement -> ELSE line .)
    IF              reduce using rule 15 (else_statement -> ELSE line .)
    INT             reduce using rule 15 (else_statement -> ELSE line .)
    FLOAT           reduce using rule 15 (else_statement -> ELSE line .)
    DOUBLE          reduce using rule 15 (else_statement -> ELSE line .)
    CHAR            reduce using rule 15 (else_statement -> ELSE line .)
    RBRACKET        reduce using rule 15 (else_statement -> ELSE line .)
    ELSE            reduce using rule 15 (else_statement -> ELSE line .)


state 115

    (7) statement -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET .

    SEMICOLON       reduce using rule 7 (statement -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    RPAREN          reduce using rule 7 (statement -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET .)


state 116

    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN . LBRACKET body RBRACKET
    (20) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN . line
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    LBRACKET        shift and go to state 119
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    statement                      shift and go to state 26
    expression                     shift and go to state 27
    line                           shift and go to state 120
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 117

    (12) if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .

    VOID            reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    RETURN          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    ID              reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    PRINTF          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    LPAREN          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    NUMBER          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    WHILE           reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    FOR             reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    IF              reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    INT             reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    FLOAT           reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    DOUBLE          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    CHAR            reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    RBRACKET        reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    ELSE            reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)


state 118

    (14) else_statement -> ELSE LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 121


state 119

    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET . body RBRACKET
    (10) body -> . line body
    (11) body -> . empty
    (3) line -> . statement SEMICOLON
    (4) line -> . expression SEMICOLON
    (5) line -> . loop_statement
    (6) line -> . if_statement
    (56) empty -> .
    (7) statement -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (27) statement -> . RETURN ID
    (28) statement -> . RETURN expression
    (33) statement -> . ID EQUALS expression
    (34) statement -> . declaration EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (43) statement -> . expression math_operator EQUALS expression
    (29) expression -> . ID LPAREN function_args RPAREN
    (30) expression -> . expression compare_operator expression
    (31) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (32) expression -> . PRINTF LPAREN STRING RPAREN
    (42) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (17) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (18) loop_statement -> . WHILE LPAREN expression RPAREN line
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (20) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (12) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (13) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (9) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE
    (55) type -> . CHAR

    RBRACKET        reduce using rule 56 (empty -> .)
    VOID            shift and go to state 30
    RETURN          shift and go to state 31
    ID              shift and go to state 21
    PRINTF          shift and go to state 33
    LPAREN          shift and go to state 22
    NUMBER          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    DOUBLE          shift and go to state 7
    CHAR            shift and go to state 8

    statement                      shift and go to state 26
    expression                     shift and go to state 27
    body                           shift and go to state 122
    line                           shift and go to state 24
    empty                          shift and go to state 25
    loop_statement                 shift and go to state 28
    if_statement                   shift and go to state 29
    declaration                    shift and go to state 32
    type                           shift and go to state 12

state 120

    (20) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .

    VOID            reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    RETURN          reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    ID              reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    PRINTF          reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    LPAREN          reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    NUMBER          reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    WHILE           reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    FOR             reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    IF              reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    INT             reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    FLOAT           reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    DOUBLE          reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    CHAR            reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    RBRACKET        reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    ELSE            reduce using rule 20 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)


state 121

    (14) else_statement -> ELSE LBRACKET body RBRACKET .

    VOID            reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    RETURN          reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    ID              reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    PRINTF          reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    LPAREN          reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    NUMBER          reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    WHILE           reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    FOR             reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    IF              reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    INT             reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    CHAR            reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)
    ELSE            reduce using rule 14 (else_statement -> ELSE LBRACKET body RBRACKET .)


state 122

    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 123


state 123

    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .

    VOID            reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    RETURN          reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    ID              reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    PRINTF          reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    LPAREN          reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    NUMBER          reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    WHILE           reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    FOR             reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    IF              reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    INT             reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    CHAR            reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    ELSE            reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMPARISON in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS in state 74 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 74 resolved as shift
WARNING: shift/reduce conflict for COMPARISON in state 76 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 76 resolved as shift
WARNING: shift/reduce conflict for LESS in state 76 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 76 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 76 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 76 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 100 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 112 resolved as shift
WARNING: reduce/reduce conflict in state 61 resolved using rule (statement -> RETURN ID)
WARNING: rejected rule (expression -> ID) in state 61
