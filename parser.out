Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> function_declaration program
Rule 2     program -> empty
Rule 3     function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET
Rule 4     function_declaration -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
Rule 5     body -> line body
Rule 6     body -> empty
Rule 7     line -> statement SEMICOLON
Rule 8     line -> expression SEMICOLON
Rule 9     line -> loop_statement
Rule 10    line -> if_statement
Rule 11    if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
Rule 12    if_statement -> IF LPAREN expression RPAREN line else_statement
Rule 13    else_statement -> ELSE LBRACKET body RBRACKET
Rule 14    else_statement -> ELSE line
Rule 15    else_statement -> empty
Rule 16    loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
Rule 17    loop_statement -> WHILE LPAREN expression RPAREN line
Rule 18    loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
Rule 19    loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
Rule 20    args -> declaration COMMA args
Rule 21    args -> declaration
Rule 22    args -> empty
Rule 23    function_args -> expression COMMA function_args
Rule 24    function_args -> expression
Rule 25    function_args -> empty
Rule 26    statement -> RETURN expression
Rule 27    statement -> RETURN
Rule 28    expression -> ID LPAREN function_args RPAREN
Rule 29    expression -> PRINTF LPAREN STRING COMMA function_args RPAREN
Rule 30    expression -> PRINTF LPAREN STRING RPAREN
Rule 31    declaration -> type ID
Rule 32    statement -> ID EQUALS expression
Rule 33    statement -> declaration EQUALS expression
Rule 34    statement -> expression math_operator EQUALS expression
Rule 35    statement -> ID INCREMENT
Rule 36    statement -> ID DECREMENT
Rule 37    expression -> expression compare_operator expression
Rule 38    expression -> expression math_operator expression
Rule 39    math_operator -> PLUS
Rule 40    math_operator -> MINUS
Rule 41    math_operator -> TIMES
Rule 42    math_operator -> DIVIDE
Rule 43    math_operator -> MODULO
Rule 44    compare_operator -> COMPARISON
Rule 45    compare_operator -> GREATER
Rule 46    compare_operator -> LESS
Rule 47    compare_operator -> LESSEQUAL
Rule 48    compare_operator -> GREATEREQUAL
Rule 49    expression -> LPAREN expression RPAREN
Rule 50    expression -> NUMBER
Rule 51    expression -> ID
Rule 52    type -> INT
Rule 53    type -> FLOAT
Rule 54    type -> DOUBLE
Rule 55    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 20 23 29
COMPARISON           : 44
DECREMENT            : 36
DIVIDE               : 42
DOUBLE               : 54
ELSE                 : 13 14
EQUALS               : 32 33 34
FLOAT                : 53
FOR                  : 18 19
GREATER              : 45
GREATEREQUAL         : 48
ID                   : 3 4 28 31 32 35 36 51
IF                   : 11 12
INCREMENT            : 35
INT                  : 52
LBRACKET             : 3 4 11 13 16 18
LESS                 : 46
LESSEQUAL            : 47
LPAREN               : 3 4 11 12 16 17 18 19 28 29 30 49
MINUS                : 40
MODULO               : 43
NUMBER               : 50
PLUS                 : 39
PRINTF               : 29 30
RBRACKET             : 3 4 11 13 16 18
RETURN               : 26 27
RPAREN               : 3 4 11 12 16 17 18 19 28 29 30 49
SEMICOLON            : 7 8 18 18 19 19
STRING               : 29 30
TIMES                : 41
VOID                 : 4
WHILE                : 16 17
error                : 

Nonterminals, with rules where they appear

args                 : 3 4 20
body                 : 3 4 5 11 13 16 18
compare_operator     : 37
declaration          : 20 21 33
else_statement       : 11 12
empty                : 2 6 15 22 25
expression           : 8 11 12 16 17 18 19 23 24 26 32 33 34 34 37 37 38 38 49
function_args        : 23 28 29
function_declaration : 1
if_statement         : 10
line                 : 5 12 14 17 19
loop_statement       : 9
math_operator        : 34 38
program              : 1 0
statement            : 7 18 18 19 19
type                 : 3 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_declaration program
    (2) program -> . empty
    (3) function_declaration -> . type ID LPAREN args RPAREN LBRACKET body RBRACKET
    (4) function_declaration -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (55) empty -> .
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    VOID            shift and go to state 5
    $end            reduce using rule 55 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    program                        shift and go to state 1
    function_declaration           shift and go to state 2
    empty                          shift and go to state 3
    type                           shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> function_declaration . program
    (1) program -> . function_declaration program
    (2) program -> . empty
    (3) function_declaration -> . type ID LPAREN args RPAREN LBRACKET body RBRACKET
    (4) function_declaration -> . VOID ID LPAREN args RPAREN LBRACKET body RBRACKET
    (55) empty -> .
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    VOID            shift and go to state 5
    $end            reduce using rule 55 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    function_declaration           shift and go to state 2
    program                        shift and go to state 9
    empty                          shift and go to state 3
    type                           shift and go to state 4

state 3

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 4

    (3) function_declaration -> type . ID LPAREN args RPAREN LBRACKET body RBRACKET

    ID              shift and go to state 10


state 5

    (4) function_declaration -> VOID . ID LPAREN args RPAREN LBRACKET body RBRACKET

    ID              shift and go to state 11


state 6

    (52) type -> INT .

    ID              reduce using rule 52 (type -> INT .)


state 7

    (53) type -> FLOAT .

    ID              reduce using rule 53 (type -> FLOAT .)


state 8

    (54) type -> DOUBLE .

    ID              reduce using rule 54 (type -> DOUBLE .)


state 9

    (1) program -> function_declaration program .

    $end            reduce using rule 1 (program -> function_declaration program .)


state 10

    (3) function_declaration -> type ID . LPAREN args RPAREN LBRACKET body RBRACKET

    LPAREN          shift and go to state 12


state 11

    (4) function_declaration -> VOID ID . LPAREN args RPAREN LBRACKET body RBRACKET

    LPAREN          shift and go to state 13


state 12

    (3) function_declaration -> type ID LPAREN . args RPAREN LBRACKET body RBRACKET
    (20) args -> . declaration COMMA args
    (21) args -> . declaration
    (22) args -> . empty
    (31) declaration -> . type ID
    (55) empty -> .
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RPAREN          reduce using rule 55 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    type                           shift and go to state 14
    args                           shift and go to state 15
    declaration                    shift and go to state 16
    empty                          shift and go to state 17

state 13

    (4) function_declaration -> VOID ID LPAREN . args RPAREN LBRACKET body RBRACKET
    (20) args -> . declaration COMMA args
    (21) args -> . declaration
    (22) args -> . empty
    (31) declaration -> . type ID
    (55) empty -> .
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RPAREN          reduce using rule 55 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    args                           shift and go to state 18
    declaration                    shift and go to state 16
    empty                          shift and go to state 17
    type                           shift and go to state 14

state 14

    (31) declaration -> type . ID

    ID              shift and go to state 19


state 15

    (3) function_declaration -> type ID LPAREN args . RPAREN LBRACKET body RBRACKET

    RPAREN          shift and go to state 20


state 16

    (20) args -> declaration . COMMA args
    (21) args -> declaration .

    COMMA           shift and go to state 21
    RPAREN          reduce using rule 21 (args -> declaration .)


state 17

    (22) args -> empty .

    RPAREN          reduce using rule 22 (args -> empty .)


state 18

    (4) function_declaration -> VOID ID LPAREN args . RPAREN LBRACKET body RBRACKET

    RPAREN          shift and go to state 22


state 19

    (31) declaration -> type ID .

    COMMA           reduce using rule 31 (declaration -> type ID .)
    RPAREN          reduce using rule 31 (declaration -> type ID .)
    EQUALS          reduce using rule 31 (declaration -> type ID .)


state 20

    (3) function_declaration -> type ID LPAREN args RPAREN . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 23


state 21

    (20) args -> declaration COMMA . args
    (20) args -> . declaration COMMA args
    (21) args -> . declaration
    (22) args -> . empty
    (31) declaration -> . type ID
    (55) empty -> .
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RPAREN          reduce using rule 55 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    declaration                    shift and go to state 16
    args                           shift and go to state 24
    empty                          shift and go to state 17
    type                           shift and go to state 14

state 22

    (4) function_declaration -> VOID ID LPAREN args RPAREN . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25


state 23

    (3) function_declaration -> type ID LPAREN args RPAREN LBRACKET . body RBRACKET
    (5) body -> . line body
    (6) body -> . empty
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (55) empty -> .
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RBRACKET        reduce using rule 55 (empty -> .)
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    type                           shift and go to state 14
    body                           shift and go to state 28
    line                           shift and go to state 29
    empty                          shift and go to state 30
    statement                      shift and go to state 31
    expression                     shift and go to state 32
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36

state 24

    (20) args -> declaration COMMA args .

    RPAREN          reduce using rule 20 (args -> declaration COMMA args .)


state 25

    (4) function_declaration -> VOID ID LPAREN args RPAREN LBRACKET . body RBRACKET
    (5) body -> . line body
    (6) body -> . empty
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (55) empty -> .
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RBRACKET        reduce using rule 55 (empty -> .)
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    body                           shift and go to state 42
    line                           shift and go to state 29
    empty                          shift and go to state 30
    statement                      shift and go to state 31
    expression                     shift and go to state 32
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 26

    (32) statement -> ID . EQUALS expression
    (35) statement -> ID . INCREMENT
    (36) statement -> ID . DECREMENT
    (28) expression -> ID . LPAREN function_args RPAREN
    (51) expression -> ID .

    EQUALS          shift and go to state 43
    INCREMENT       shift and go to state 44
    DECREMENT       shift and go to state 45
    LPAREN          shift and go to state 46
    SEMICOLON       reduce using rule 51 (expression -> ID .)
    PLUS            reduce using rule 51 (expression -> ID .)
    MINUS           reduce using rule 51 (expression -> ID .)
    TIMES           reduce using rule 51 (expression -> ID .)
    DIVIDE          reduce using rule 51 (expression -> ID .)
    MODULO          reduce using rule 51 (expression -> ID .)
    COMPARISON      reduce using rule 51 (expression -> ID .)
    GREATER         reduce using rule 51 (expression -> ID .)
    LESS            reduce using rule 51 (expression -> ID .)
    LESSEQUAL       reduce using rule 51 (expression -> ID .)
    GREATEREQUAL    reduce using rule 51 (expression -> ID .)


state 27

    (49) expression -> LPAREN . expression RPAREN
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 47

state 28

    (3) function_declaration -> type ID LPAREN args RPAREN LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 49


state 29

    (5) body -> line . body
    (5) body -> . line body
    (6) body -> . empty
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (55) empty -> .
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RBRACKET        reduce using rule 55 (empty -> .)
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    line                           shift and go to state 29
    body                           shift and go to state 50
    empty                          shift and go to state 30
    statement                      shift and go to state 31
    expression                     shift and go to state 32
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 30

    (6) body -> empty .

    RBRACKET        reduce using rule 6 (body -> empty .)


state 31

    (7) line -> statement . SEMICOLON

    SEMICOLON       shift and go to state 51


state 32

    (8) line -> expression . SEMICOLON
    (34) statement -> expression . math_operator EQUALS expression
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL

    SEMICOLON       shift and go to state 52
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64

    math_operator                  shift and go to state 53
    compare_operator               shift and go to state 54

state 33

    (9) line -> loop_statement .

    RETURN          reduce using rule 9 (line -> loop_statement .)
    ID              reduce using rule 9 (line -> loop_statement .)
    PRINTF          reduce using rule 9 (line -> loop_statement .)
    LPAREN          reduce using rule 9 (line -> loop_statement .)
    NUMBER          reduce using rule 9 (line -> loop_statement .)
    WHILE           reduce using rule 9 (line -> loop_statement .)
    FOR             reduce using rule 9 (line -> loop_statement .)
    IF              reduce using rule 9 (line -> loop_statement .)
    INT             reduce using rule 9 (line -> loop_statement .)
    FLOAT           reduce using rule 9 (line -> loop_statement .)
    DOUBLE          reduce using rule 9 (line -> loop_statement .)
    RBRACKET        reduce using rule 9 (line -> loop_statement .)
    ELSE            reduce using rule 9 (line -> loop_statement .)


state 34

    (10) line -> if_statement .

    RETURN          reduce using rule 10 (line -> if_statement .)
    ID              reduce using rule 10 (line -> if_statement .)
    PRINTF          reduce using rule 10 (line -> if_statement .)
    LPAREN          reduce using rule 10 (line -> if_statement .)
    NUMBER          reduce using rule 10 (line -> if_statement .)
    WHILE           reduce using rule 10 (line -> if_statement .)
    FOR             reduce using rule 10 (line -> if_statement .)
    IF              reduce using rule 10 (line -> if_statement .)
    INT             reduce using rule 10 (line -> if_statement .)
    FLOAT           reduce using rule 10 (line -> if_statement .)
    DOUBLE          reduce using rule 10 (line -> if_statement .)
    RBRACKET        reduce using rule 10 (line -> if_statement .)
    ELSE            reduce using rule 10 (line -> if_statement .)


state 35

    (26) statement -> RETURN . expression
    (27) statement -> RETURN .
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    SEMICOLON       reduce using rule 27 (statement -> RETURN .)
    RPAREN          reduce using rule 27 (statement -> RETURN .)
    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 65

state 36

    (33) statement -> declaration . EQUALS expression

    EQUALS          shift and go to state 66


state 37

    (29) expression -> PRINTF . LPAREN STRING COMMA function_args RPAREN
    (30) expression -> PRINTF . LPAREN STRING RPAREN

    LPAREN          shift and go to state 67


state 38

    (50) expression -> NUMBER .

    SEMICOLON       reduce using rule 50 (expression -> NUMBER .)
    PLUS            reduce using rule 50 (expression -> NUMBER .)
    MINUS           reduce using rule 50 (expression -> NUMBER .)
    TIMES           reduce using rule 50 (expression -> NUMBER .)
    DIVIDE          reduce using rule 50 (expression -> NUMBER .)
    MODULO          reduce using rule 50 (expression -> NUMBER .)
    COMPARISON      reduce using rule 50 (expression -> NUMBER .)
    GREATER         reduce using rule 50 (expression -> NUMBER .)
    LESS            reduce using rule 50 (expression -> NUMBER .)
    LESSEQUAL       reduce using rule 50 (expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 50 (expression -> NUMBER .)
    RPAREN          reduce using rule 50 (expression -> NUMBER .)
    COMMA           reduce using rule 50 (expression -> NUMBER .)


state 39

    (16) loop_statement -> WHILE . LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> WHILE . LPAREN expression RPAREN line

    LPAREN          shift and go to state 68


state 40

    (18) loop_statement -> FOR . LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> FOR . LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line

    LPAREN          shift and go to state 69


state 41

    (11) if_statement -> IF . LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> IF . LPAREN expression RPAREN line else_statement

    LPAREN          shift and go to state 70


state 42

    (4) function_declaration -> VOID ID LPAREN args RPAREN LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 71


state 43

    (32) statement -> ID EQUALS . expression
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 72

state 44

    (35) statement -> ID INCREMENT .

    SEMICOLON       reduce using rule 35 (statement -> ID INCREMENT .)
    RPAREN          reduce using rule 35 (statement -> ID INCREMENT .)


state 45

    (36) statement -> ID DECREMENT .

    SEMICOLON       reduce using rule 36 (statement -> ID DECREMENT .)
    RPAREN          reduce using rule 36 (statement -> ID DECREMENT .)


state 46

    (28) expression -> ID LPAREN . function_args RPAREN
    (23) function_args -> . expression COMMA function_args
    (24) function_args -> . expression
    (25) function_args -> . empty
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (55) empty -> .

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    RPAREN          reduce using rule 55 (empty -> .)

    function_args                  shift and go to state 73
    expression                     shift and go to state 74
    empty                          shift and go to state 75

state 47

    (49) expression -> LPAREN expression . RPAREN
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

    RPAREN          shift and go to state 76
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

    compare_operator               shift and go to state 54
    math_operator                  shift and go to state 77

state 48

    (28) expression -> ID . LPAREN function_args RPAREN
    (51) expression -> ID .

    LPAREN          shift and go to state 46
    RPAREN          reduce using rule 51 (expression -> ID .)
    COMPARISON      reduce using rule 51 (expression -> ID .)
    GREATER         reduce using rule 51 (expression -> ID .)
    LESS            reduce using rule 51 (expression -> ID .)
    LESSEQUAL       reduce using rule 51 (expression -> ID .)
    GREATEREQUAL    reduce using rule 51 (expression -> ID .)
    PLUS            reduce using rule 51 (expression -> ID .)
    MINUS           reduce using rule 51 (expression -> ID .)
    TIMES           reduce using rule 51 (expression -> ID .)
    DIVIDE          reduce using rule 51 (expression -> ID .)
    MODULO          reduce using rule 51 (expression -> ID .)
    SEMICOLON       reduce using rule 51 (expression -> ID .)
    COMMA           reduce using rule 51 (expression -> ID .)


state 49

    (3) function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .

    VOID            reduce using rule 3 (function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    INT             reduce using rule 3 (function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 3 (function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 3 (function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    $end            reduce using rule 3 (function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET .)


state 50

    (5) body -> line body .

    RBRACKET        reduce using rule 5 (body -> line body .)


state 51

    (7) line -> statement SEMICOLON .

    RETURN          reduce using rule 7 (line -> statement SEMICOLON .)
    ID              reduce using rule 7 (line -> statement SEMICOLON .)
    PRINTF          reduce using rule 7 (line -> statement SEMICOLON .)
    LPAREN          reduce using rule 7 (line -> statement SEMICOLON .)
    NUMBER          reduce using rule 7 (line -> statement SEMICOLON .)
    WHILE           reduce using rule 7 (line -> statement SEMICOLON .)
    FOR             reduce using rule 7 (line -> statement SEMICOLON .)
    IF              reduce using rule 7 (line -> statement SEMICOLON .)
    INT             reduce using rule 7 (line -> statement SEMICOLON .)
    FLOAT           reduce using rule 7 (line -> statement SEMICOLON .)
    DOUBLE          reduce using rule 7 (line -> statement SEMICOLON .)
    RBRACKET        reduce using rule 7 (line -> statement SEMICOLON .)
    ELSE            reduce using rule 7 (line -> statement SEMICOLON .)


state 52

    (8) line -> expression SEMICOLON .

    RETURN          reduce using rule 8 (line -> expression SEMICOLON .)
    ID              reduce using rule 8 (line -> expression SEMICOLON .)
    PRINTF          reduce using rule 8 (line -> expression SEMICOLON .)
    LPAREN          reduce using rule 8 (line -> expression SEMICOLON .)
    NUMBER          reduce using rule 8 (line -> expression SEMICOLON .)
    WHILE           reduce using rule 8 (line -> expression SEMICOLON .)
    FOR             reduce using rule 8 (line -> expression SEMICOLON .)
    IF              reduce using rule 8 (line -> expression SEMICOLON .)
    INT             reduce using rule 8 (line -> expression SEMICOLON .)
    FLOAT           reduce using rule 8 (line -> expression SEMICOLON .)
    DOUBLE          reduce using rule 8 (line -> expression SEMICOLON .)
    RBRACKET        reduce using rule 8 (line -> expression SEMICOLON .)
    ELSE            reduce using rule 8 (line -> expression SEMICOLON .)


state 53

    (34) statement -> expression math_operator . EQUALS expression
    (38) expression -> expression math_operator . expression
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    EQUALS          shift and go to state 79
    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 78

state 54

    (37) expression -> expression compare_operator . expression
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 80

state 55

    (39) math_operator -> PLUS .

    EQUALS          reduce using rule 39 (math_operator -> PLUS .)
    ID              reduce using rule 39 (math_operator -> PLUS .)
    PRINTF          reduce using rule 39 (math_operator -> PLUS .)
    LPAREN          reduce using rule 39 (math_operator -> PLUS .)
    NUMBER          reduce using rule 39 (math_operator -> PLUS .)


state 56

    (40) math_operator -> MINUS .

    EQUALS          reduce using rule 40 (math_operator -> MINUS .)
    ID              reduce using rule 40 (math_operator -> MINUS .)
    PRINTF          reduce using rule 40 (math_operator -> MINUS .)
    LPAREN          reduce using rule 40 (math_operator -> MINUS .)
    NUMBER          reduce using rule 40 (math_operator -> MINUS .)


state 57

    (41) math_operator -> TIMES .

    EQUALS          reduce using rule 41 (math_operator -> TIMES .)
    ID              reduce using rule 41 (math_operator -> TIMES .)
    PRINTF          reduce using rule 41 (math_operator -> TIMES .)
    LPAREN          reduce using rule 41 (math_operator -> TIMES .)
    NUMBER          reduce using rule 41 (math_operator -> TIMES .)


state 58

    (42) math_operator -> DIVIDE .

    EQUALS          reduce using rule 42 (math_operator -> DIVIDE .)
    ID              reduce using rule 42 (math_operator -> DIVIDE .)
    PRINTF          reduce using rule 42 (math_operator -> DIVIDE .)
    LPAREN          reduce using rule 42 (math_operator -> DIVIDE .)
    NUMBER          reduce using rule 42 (math_operator -> DIVIDE .)


state 59

    (43) math_operator -> MODULO .

    EQUALS          reduce using rule 43 (math_operator -> MODULO .)
    ID              reduce using rule 43 (math_operator -> MODULO .)
    PRINTF          reduce using rule 43 (math_operator -> MODULO .)
    LPAREN          reduce using rule 43 (math_operator -> MODULO .)
    NUMBER          reduce using rule 43 (math_operator -> MODULO .)


state 60

    (44) compare_operator -> COMPARISON .

    ID              reduce using rule 44 (compare_operator -> COMPARISON .)
    PRINTF          reduce using rule 44 (compare_operator -> COMPARISON .)
    LPAREN          reduce using rule 44 (compare_operator -> COMPARISON .)
    NUMBER          reduce using rule 44 (compare_operator -> COMPARISON .)


state 61

    (45) compare_operator -> GREATER .

    ID              reduce using rule 45 (compare_operator -> GREATER .)
    PRINTF          reduce using rule 45 (compare_operator -> GREATER .)
    LPAREN          reduce using rule 45 (compare_operator -> GREATER .)
    NUMBER          reduce using rule 45 (compare_operator -> GREATER .)


state 62

    (46) compare_operator -> LESS .

    ID              reduce using rule 46 (compare_operator -> LESS .)
    PRINTF          reduce using rule 46 (compare_operator -> LESS .)
    LPAREN          reduce using rule 46 (compare_operator -> LESS .)
    NUMBER          reduce using rule 46 (compare_operator -> LESS .)


state 63

    (47) compare_operator -> LESSEQUAL .

    ID              reduce using rule 47 (compare_operator -> LESSEQUAL .)
    PRINTF          reduce using rule 47 (compare_operator -> LESSEQUAL .)
    LPAREN          reduce using rule 47 (compare_operator -> LESSEQUAL .)
    NUMBER          reduce using rule 47 (compare_operator -> LESSEQUAL .)


state 64

    (48) compare_operator -> GREATEREQUAL .

    ID              reduce using rule 48 (compare_operator -> GREATEREQUAL .)
    PRINTF          reduce using rule 48 (compare_operator -> GREATEREQUAL .)
    LPAREN          reduce using rule 48 (compare_operator -> GREATEREQUAL .)
    NUMBER          reduce using rule 48 (compare_operator -> GREATEREQUAL .)


state 65

    (26) statement -> RETURN expression .
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

    SEMICOLON       reduce using rule 26 (statement -> RETURN expression .)
    RPAREN          reduce using rule 26 (statement -> RETURN expression .)
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

    compare_operator               shift and go to state 54
    math_operator                  shift and go to state 77

state 66

    (33) statement -> declaration EQUALS . expression
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 81

state 67

    (29) expression -> PRINTF LPAREN . STRING COMMA function_args RPAREN
    (30) expression -> PRINTF LPAREN . STRING RPAREN

    STRING          shift and go to state 82


state 68

    (16) loop_statement -> WHILE LPAREN . expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> WHILE LPAREN . expression RPAREN line
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 83

state 69

    (18) loop_statement -> FOR LPAREN . statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> FOR LPAREN . statement SEMICOLON expression SEMICOLON statement RPAREN line
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (31) declaration -> . type ID
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    statement                      shift and go to state 84
    expression                     shift and go to state 85
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 70

    (11) if_statement -> IF LPAREN . expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> IF LPAREN . expression RPAREN line else_statement
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 86

state 71

    (4) function_declaration -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET .

    VOID            reduce using rule 4 (function_declaration -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    INT             reduce using rule 4 (function_declaration -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 4 (function_declaration -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 4 (function_declaration -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET .)
    $end            reduce using rule 4 (function_declaration -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET .)


state 72

    (32) statement -> ID EQUALS expression .
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

    SEMICOLON       reduce using rule 32 (statement -> ID EQUALS expression .)
    RPAREN          reduce using rule 32 (statement -> ID EQUALS expression .)
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

    compare_operator               shift and go to state 54
    math_operator                  shift and go to state 77

state 73

    (28) expression -> ID LPAREN function_args . RPAREN

    RPAREN          shift and go to state 87


state 74

    (23) function_args -> expression . COMMA function_args
    (24) function_args -> expression .
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

    COMMA           shift and go to state 88
    RPAREN          reduce using rule 24 (function_args -> expression .)
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

    compare_operator               shift and go to state 54
    math_operator                  shift and go to state 77

state 75

    (25) function_args -> empty .

    RPAREN          reduce using rule 25 (function_args -> empty .)


state 76

    (49) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    COMPARISON      reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 49 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 49 (expression -> LPAREN expression RPAREN .)


state 77

    (38) expression -> expression math_operator . expression
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 78

state 78

    (38) expression -> expression math_operator expression .
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

  ! shift/reduce conflict for COMPARISON resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    SEMICOLON       reduce using rule 38 (expression -> expression math_operator expression .)
    RPAREN          reduce using rule 38 (expression -> expression math_operator expression .)
    COMMA           reduce using rule 38 (expression -> expression math_operator expression .)
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

  ! PLUS            [ reduce using rule 38 (expression -> expression math_operator expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression math_operator expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression math_operator expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression math_operator expression .) ]
  ! MODULO          [ reduce using rule 38 (expression -> expression math_operator expression .) ]
  ! COMPARISON      [ reduce using rule 38 (expression -> expression math_operator expression .) ]
  ! GREATER         [ reduce using rule 38 (expression -> expression math_operator expression .) ]
  ! LESS            [ reduce using rule 38 (expression -> expression math_operator expression .) ]
  ! LESSEQUAL       [ reduce using rule 38 (expression -> expression math_operator expression .) ]
  ! GREATEREQUAL    [ reduce using rule 38 (expression -> expression math_operator expression .) ]

    math_operator                  shift and go to state 77
    compare_operator               shift and go to state 54

state 79

    (34) statement -> expression math_operator EQUALS . expression
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 89

state 80

    (37) expression -> expression compare_operator expression .
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

  ! shift/reduce conflict for COMPARISON resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    SEMICOLON       reduce using rule 37 (expression -> expression compare_operator expression .)
    RPAREN          reduce using rule 37 (expression -> expression compare_operator expression .)
    COMMA           reduce using rule 37 (expression -> expression compare_operator expression .)
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

  ! PLUS            [ reduce using rule 37 (expression -> expression compare_operator expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression compare_operator expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> expression compare_operator expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression compare_operator expression .) ]
  ! MODULO          [ reduce using rule 37 (expression -> expression compare_operator expression .) ]
  ! COMPARISON      [ reduce using rule 37 (expression -> expression compare_operator expression .) ]
  ! GREATER         [ reduce using rule 37 (expression -> expression compare_operator expression .) ]
  ! LESS            [ reduce using rule 37 (expression -> expression compare_operator expression .) ]
  ! LESSEQUAL       [ reduce using rule 37 (expression -> expression compare_operator expression .) ]
  ! GREATEREQUAL    [ reduce using rule 37 (expression -> expression compare_operator expression .) ]

    compare_operator               shift and go to state 54
    math_operator                  shift and go to state 77

state 81

    (33) statement -> declaration EQUALS expression .
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

    SEMICOLON       reduce using rule 33 (statement -> declaration EQUALS expression .)
    RPAREN          reduce using rule 33 (statement -> declaration EQUALS expression .)
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

    compare_operator               shift and go to state 54
    math_operator                  shift and go to state 77

state 82

    (29) expression -> PRINTF LPAREN STRING . COMMA function_args RPAREN
    (30) expression -> PRINTF LPAREN STRING . RPAREN

    COMMA           shift and go to state 90
    RPAREN          shift and go to state 91


state 83

    (16) loop_statement -> WHILE LPAREN expression . RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> WHILE LPAREN expression . RPAREN line
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

    RPAREN          shift and go to state 92
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

    compare_operator               shift and go to state 54
    math_operator                  shift and go to state 77

state 84

    (18) loop_statement -> FOR LPAREN statement . SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> FOR LPAREN statement . SEMICOLON expression SEMICOLON statement RPAREN line

    SEMICOLON       shift and go to state 93


state 85

    (34) statement -> expression . math_operator EQUALS expression
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL

    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64

    math_operator                  shift and go to state 53
    compare_operator               shift and go to state 54

state 86

    (11) if_statement -> IF LPAREN expression . RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> IF LPAREN expression . RPAREN line else_statement
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

    RPAREN          shift and go to state 94
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

    compare_operator               shift and go to state 54
    math_operator                  shift and go to state 77

state 87

    (28) expression -> ID LPAREN function_args RPAREN .

    SEMICOLON       reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    PLUS            reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    MINUS           reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    TIMES           reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    DIVIDE          reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    MODULO          reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    COMPARISON      reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    GREATER         reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    LESS            reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    LESSEQUAL       reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    GREATEREQUAL    reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    RPAREN          reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)
    COMMA           reduce using rule 28 (expression -> ID LPAREN function_args RPAREN .)


state 88

    (23) function_args -> expression COMMA . function_args
    (23) function_args -> . expression COMMA function_args
    (24) function_args -> . expression
    (25) function_args -> . empty
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (55) empty -> .

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    RPAREN          reduce using rule 55 (empty -> .)

    expression                     shift and go to state 74
    function_args                  shift and go to state 95
    empty                          shift and go to state 75

state 89

    (34) statement -> expression math_operator EQUALS expression .
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

    SEMICOLON       reduce using rule 34 (statement -> expression math_operator EQUALS expression .)
    RPAREN          reduce using rule 34 (statement -> expression math_operator EQUALS expression .)
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

    math_operator                  shift and go to state 77
    compare_operator               shift and go to state 54

state 90

    (29) expression -> PRINTF LPAREN STRING COMMA . function_args RPAREN
    (23) function_args -> . expression COMMA function_args
    (24) function_args -> . expression
    (25) function_args -> . empty
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (55) empty -> .

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    RPAREN          reduce using rule 55 (empty -> .)

    function_args                  shift and go to state 96
    expression                     shift and go to state 74
    empty                          shift and go to state 75

state 91

    (30) expression -> PRINTF LPAREN STRING RPAREN .

    SEMICOLON       reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    PLUS            reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    MINUS           reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    TIMES           reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    DIVIDE          reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    MODULO          reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    COMPARISON      reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    GREATER         reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    LESS            reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    LESSEQUAL       reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    GREATEREQUAL    reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    RPAREN          reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)
    COMMA           reduce using rule 30 (expression -> PRINTF LPAREN STRING RPAREN .)


state 92

    (16) loop_statement -> WHILE LPAREN expression RPAREN . LBRACKET body RBRACKET
    (17) loop_statement -> WHILE LPAREN expression RPAREN . line
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    LBRACKET        shift and go to state 97
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    expression                     shift and go to state 32
    line                           shift and go to state 98
    statement                      shift and go to state 31
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 93

    (18) loop_statement -> FOR LPAREN statement SEMICOLON . expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> FOR LPAREN statement SEMICOLON . expression SEMICOLON statement RPAREN line
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID

    ID              shift and go to state 48
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38

    expression                     shift and go to state 99

state 94

    (11) if_statement -> IF LPAREN expression RPAREN . LBRACKET body RBRACKET else_statement
    (12) if_statement -> IF LPAREN expression RPAREN . line else_statement
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    LBRACKET        shift and go to state 100
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    expression                     shift and go to state 32
    line                           shift and go to state 101
    statement                      shift and go to state 31
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 95

    (23) function_args -> expression COMMA function_args .

    RPAREN          reduce using rule 23 (function_args -> expression COMMA function_args .)


state 96

    (29) expression -> PRINTF LPAREN STRING COMMA function_args . RPAREN

    RPAREN          shift and go to state 102


state 97

    (16) loop_statement -> WHILE LPAREN expression RPAREN LBRACKET . body RBRACKET
    (5) body -> . line body
    (6) body -> . empty
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (55) empty -> .
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RBRACKET        reduce using rule 55 (empty -> .)
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    expression                     shift and go to state 32
    body                           shift and go to state 103
    line                           shift and go to state 29
    empty                          shift and go to state 30
    statement                      shift and go to state 31
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 98

    (17) loop_statement -> WHILE LPAREN expression RPAREN line .

    RETURN          reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    ID              reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    PRINTF          reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    LPAREN          reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    NUMBER          reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    WHILE           reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    FOR             reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    IF              reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    INT             reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    FLOAT           reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    DOUBLE          reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    RBRACKET        reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)
    ELSE            reduce using rule 17 (loop_statement -> WHILE LPAREN expression RPAREN line .)


state 99

    (18) loop_statement -> FOR LPAREN statement SEMICOLON expression . SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression . SEMICOLON statement RPAREN line
    (37) expression -> expression . compare_operator expression
    (38) expression -> expression . math_operator expression
    (44) compare_operator -> . COMPARISON
    (45) compare_operator -> . GREATER
    (46) compare_operator -> . LESS
    (47) compare_operator -> . LESSEQUAL
    (48) compare_operator -> . GREATEREQUAL
    (39) math_operator -> . PLUS
    (40) math_operator -> . MINUS
    (41) math_operator -> . TIMES
    (42) math_operator -> . DIVIDE
    (43) math_operator -> . MODULO

    SEMICOLON       shift and go to state 104
    COMPARISON      shift and go to state 60
    GREATER         shift and go to state 61
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    MODULO          shift and go to state 59

    compare_operator               shift and go to state 54
    math_operator                  shift and go to state 77

state 100

    (11) if_statement -> IF LPAREN expression RPAREN LBRACKET . body RBRACKET else_statement
    (5) body -> . line body
    (6) body -> . empty
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (55) empty -> .
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RBRACKET        reduce using rule 55 (empty -> .)
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    expression                     shift and go to state 32
    body                           shift and go to state 105
    line                           shift and go to state 29
    empty                          shift and go to state 30
    statement                      shift and go to state 31
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 101

    (12) if_statement -> IF LPAREN expression RPAREN line . else_statement
    (13) else_statement -> . ELSE LBRACKET body RBRACKET
    (14) else_statement -> . ELSE line
    (15) else_statement -> . empty
    (55) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 107
    RETURN          reduce using rule 55 (empty -> .)
    ID              reduce using rule 55 (empty -> .)
    PRINTF          reduce using rule 55 (empty -> .)
    LPAREN          reduce using rule 55 (empty -> .)
    NUMBER          reduce using rule 55 (empty -> .)
    WHILE           reduce using rule 55 (empty -> .)
    FOR             reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    INT             reduce using rule 55 (empty -> .)
    FLOAT           reduce using rule 55 (empty -> .)
    DOUBLE          reduce using rule 55 (empty -> .)
    RBRACKET        reduce using rule 55 (empty -> .)

  ! ELSE            [ reduce using rule 55 (empty -> .) ]

    else_statement                 shift and go to state 106
    empty                          shift and go to state 108

state 102

    (29) expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .

    SEMICOLON       reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    PLUS            reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    MINUS           reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    TIMES           reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    DIVIDE          reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    MODULO          reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    COMPARISON      reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    GREATER         reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    LESS            reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    LESSEQUAL       reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    GREATEREQUAL    reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    RPAREN          reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)
    COMMA           reduce using rule 29 (expression -> PRINTF LPAREN STRING COMMA function_args RPAREN .)


state 103

    (16) loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 109


state 104

    (18) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON . statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON . statement RPAREN line
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (31) declaration -> . type ID
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    statement                      shift and go to state 110
    expression                     shift and go to state 85
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 105

    (11) if_statement -> IF LPAREN expression RPAREN LBRACKET body . RBRACKET else_statement

    RBRACKET        shift and go to state 111


state 106

    (12) if_statement -> IF LPAREN expression RPAREN line else_statement .

    RETURN          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    ID              reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    PRINTF          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    LPAREN          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    NUMBER          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    WHILE           reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    FOR             reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    IF              reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    INT             reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    FLOAT           reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    DOUBLE          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    RBRACKET        reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)
    ELSE            reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN line else_statement .)


state 107

    (13) else_statement -> ELSE . LBRACKET body RBRACKET
    (14) else_statement -> ELSE . line
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    LBRACKET        shift and go to state 112
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    line                           shift and go to state 113
    statement                      shift and go to state 31
    expression                     shift and go to state 32
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 108

    (15) else_statement -> empty .

    RETURN          reduce using rule 15 (else_statement -> empty .)
    ID              reduce using rule 15 (else_statement -> empty .)
    PRINTF          reduce using rule 15 (else_statement -> empty .)
    LPAREN          reduce using rule 15 (else_statement -> empty .)
    NUMBER          reduce using rule 15 (else_statement -> empty .)
    WHILE           reduce using rule 15 (else_statement -> empty .)
    FOR             reduce using rule 15 (else_statement -> empty .)
    IF              reduce using rule 15 (else_statement -> empty .)
    INT             reduce using rule 15 (else_statement -> empty .)
    FLOAT           reduce using rule 15 (else_statement -> empty .)
    DOUBLE          reduce using rule 15 (else_statement -> empty .)
    RBRACKET        reduce using rule 15 (else_statement -> empty .)
    ELSE            reduce using rule 15 (else_statement -> empty .)


state 109

    (16) loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .

    RETURN          reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    ID              reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    PRINTF          reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    LPAREN          reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    NUMBER          reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    WHILE           reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    FOR             reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    IF              reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    INT             reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)
    ELSE            reduce using rule 16 (loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET .)


state 110

    (18) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement . RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement . RPAREN line

    RPAREN          shift and go to state 114


state 111

    (11) if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET . else_statement
    (13) else_statement -> . ELSE LBRACKET body RBRACKET
    (14) else_statement -> . ELSE line
    (15) else_statement -> . empty
    (55) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 107
    RETURN          reduce using rule 55 (empty -> .)
    ID              reduce using rule 55 (empty -> .)
    PRINTF          reduce using rule 55 (empty -> .)
    LPAREN          reduce using rule 55 (empty -> .)
    NUMBER          reduce using rule 55 (empty -> .)
    WHILE           reduce using rule 55 (empty -> .)
    FOR             reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    INT             reduce using rule 55 (empty -> .)
    FLOAT           reduce using rule 55 (empty -> .)
    DOUBLE          reduce using rule 55 (empty -> .)
    RBRACKET        reduce using rule 55 (empty -> .)

  ! ELSE            [ reduce using rule 55 (empty -> .) ]

    else_statement                 shift and go to state 115
    empty                          shift and go to state 108

state 112

    (13) else_statement -> ELSE LBRACKET . body RBRACKET
    (5) body -> . line body
    (6) body -> . empty
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (55) empty -> .
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RBRACKET        reduce using rule 55 (empty -> .)
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    body                           shift and go to state 116
    line                           shift and go to state 29
    empty                          shift and go to state 30
    statement                      shift and go to state 31
    expression                     shift and go to state 32
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 113

    (14) else_statement -> ELSE line .

    RETURN          reduce using rule 14 (else_statement -> ELSE line .)
    ID              reduce using rule 14 (else_statement -> ELSE line .)
    PRINTF          reduce using rule 14 (else_statement -> ELSE line .)
    LPAREN          reduce using rule 14 (else_statement -> ELSE line .)
    NUMBER          reduce using rule 14 (else_statement -> ELSE line .)
    WHILE           reduce using rule 14 (else_statement -> ELSE line .)
    FOR             reduce using rule 14 (else_statement -> ELSE line .)
    IF              reduce using rule 14 (else_statement -> ELSE line .)
    INT             reduce using rule 14 (else_statement -> ELSE line .)
    FLOAT           reduce using rule 14 (else_statement -> ELSE line .)
    DOUBLE          reduce using rule 14 (else_statement -> ELSE line .)
    RBRACKET        reduce using rule 14 (else_statement -> ELSE line .)
    ELSE            reduce using rule 14 (else_statement -> ELSE line .)


state 114

    (18) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN . LBRACKET body RBRACKET
    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN . line
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    LBRACKET        shift and go to state 117
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    statement                      shift and go to state 31
    expression                     shift and go to state 32
    line                           shift and go to state 118
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 115

    (11) if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .

    RETURN          reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    ID              reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    PRINTF          reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    LPAREN          reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    NUMBER          reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    WHILE           reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    FOR             reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    IF              reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    INT             reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    FLOAT           reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    DOUBLE          reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    RBRACKET        reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)
    ELSE            reduce using rule 11 (if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement .)


state 116

    (13) else_statement -> ELSE LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 119


state 117

    (18) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET . body RBRACKET
    (5) body -> . line body
    (6) body -> . empty
    (7) line -> . statement SEMICOLON
    (8) line -> . expression SEMICOLON
    (9) line -> . loop_statement
    (10) line -> . if_statement
    (55) empty -> .
    (26) statement -> . RETURN expression
    (27) statement -> . RETURN
    (32) statement -> . ID EQUALS expression
    (33) statement -> . declaration EQUALS expression
    (34) statement -> . expression math_operator EQUALS expression
    (35) statement -> . ID INCREMENT
    (36) statement -> . ID DECREMENT
    (28) expression -> . ID LPAREN function_args RPAREN
    (29) expression -> . PRINTF LPAREN STRING COMMA function_args RPAREN
    (30) expression -> . PRINTF LPAREN STRING RPAREN
    (37) expression -> . expression compare_operator expression
    (38) expression -> . expression math_operator expression
    (49) expression -> . LPAREN expression RPAREN
    (50) expression -> . NUMBER
    (51) expression -> . ID
    (16) loop_statement -> . WHILE LPAREN expression RPAREN LBRACKET body RBRACKET
    (17) loop_statement -> . WHILE LPAREN expression RPAREN line
    (18) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET
    (19) loop_statement -> . FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line
    (11) if_statement -> . IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement
    (12) if_statement -> . IF LPAREN expression RPAREN line else_statement
    (31) declaration -> . type ID
    (52) type -> . INT
    (53) type -> . FLOAT
    (54) type -> . DOUBLE

    RBRACKET        reduce using rule 55 (empty -> .)
    RETURN          shift and go to state 35
    ID              shift and go to state 26
    PRINTF          shift and go to state 37
    LPAREN          shift and go to state 27
    NUMBER          shift and go to state 38
    WHILE           shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    DOUBLE          shift and go to state 8

    statement                      shift and go to state 31
    expression                     shift and go to state 32
    body                           shift and go to state 120
    line                           shift and go to state 29
    empty                          shift and go to state 30
    loop_statement                 shift and go to state 33
    if_statement                   shift and go to state 34
    declaration                    shift and go to state 36
    type                           shift and go to state 14

state 118

    (19) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .

    RETURN          reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    ID              reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    PRINTF          reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    LPAREN          reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    NUMBER          reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    WHILE           reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    FOR             reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    IF              reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    INT             reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    FLOAT           reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    DOUBLE          reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    RBRACKET        reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)
    ELSE            reduce using rule 19 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN line .)


state 119

    (13) else_statement -> ELSE LBRACKET body RBRACKET .

    RETURN          reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    ID              reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    PRINTF          reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    LPAREN          reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    NUMBER          reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    WHILE           reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    FOR             reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    IF              reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    INT             reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)
    ELSE            reduce using rule 13 (else_statement -> ELSE LBRACKET body RBRACKET .)


state 120

    (18) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 121


state 121

    (18) loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .

    RETURN          reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    ID              reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    PRINTF          reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    LPAREN          reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    NUMBER          reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    WHILE           reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    FOR             reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    IF              reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    INT             reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)
    ELSE            reduce using rule 18 (loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMPARISON in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS in state 78 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 78 resolved as shift
WARNING: shift/reduce conflict for COMPARISON in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS in state 80 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 80 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 101 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 111 resolved as shift
