
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSCHAR COMMA DIVIDE DOUBLE ELSE EQUALS FLOAT FOR ID IF INT LBRACKET LPAREN MINUS NUMBER PLUS RBRACKET RETURN RPAREN SEMICOLON TIMES VOID WHILEprogram : function_declarationline : statement SEMICOLON\n            | expression SEMICOLON\n            | loop_statement\n            | if_statementstatement : ID EQUALS expression\n                | declaration EQUALS expressionstatement : VOID ID LPAREN args RPAREN LBRACKET body RBRACKETfunction_declaration : type ID LPAREN args RPAREN LBRACKET body RBRACKETdeclaration : type IDbody : line body\n            | emptyif_statement : IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement\n                    | IF LPAREN expression RPAREN line else_statement\n    else_statement : ELSE LBRACKET body RBRACKET\n                        | ELSE line\n                        | empty\n    loop_statement : WHILE LPAREN expression RPAREN LBRACKET body RBRACKET\n    loop_statement : FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET\n    args : declaration COMMA args\n            | declaration\n            | emptyfunction_args : ID COMMA function_args\n                    | ID\n                    | empty\n    statement : RETURN ID\n                | RETURN NUMBERstatement : ID LPAREN function_args RPAREN\n    expression : expression EQUALS expression\n    expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERtype : INT\n              | FLOAT\n              | DOUBLE\n              | CHARempty :'
    
_lr_action_items = {'INT':([0,9,16,17,22,26,27,41,42,54,67,76,79,81,82,83,85,87,88,89,91,93,94,95,98,100,101,103,],[4,4,4,4,4,-4,-5,-2,-3,4,4,4,4,4,-41,4,4,-14,4,-17,-18,-41,4,-16,-13,4,-15,-19,]),'FLOAT':([0,9,16,17,22,26,27,41,42,54,67,76,79,81,82,83,85,87,88,89,91,93,94,95,98,100,101,103,],[5,5,5,5,5,-4,-5,-2,-3,5,5,5,5,5,-41,5,5,-14,5,-17,-18,-41,5,-16,-13,5,-15,-19,]),'DOUBLE':([0,9,16,17,22,26,27,41,42,54,67,76,79,81,82,83,85,87,88,89,91,93,94,95,98,100,101,103,],[6,6,6,6,6,-4,-5,-2,-3,6,6,6,6,6,-41,6,6,-14,6,-17,-18,-41,6,-16,-13,6,-15,-19,]),'CHAR':([0,9,16,17,22,26,27,41,42,54,67,76,79,81,82,83,85,87,88,89,91,93,94,95,98,100,101,103,],[7,7,7,7,7,-4,-5,-2,-3,7,7,7,7,7,-41,7,7,-14,7,-17,-18,-41,7,-16,-13,7,-15,-19,]),'$end':([1,2,39,],[0,-1,-9,]),'ID':([3,4,5,6,7,10,17,22,26,27,29,30,37,41,42,54,71,76,79,81,82,83,85,87,88,89,91,93,94,95,98,100,101,103,],[8,-37,-38,-39,-40,14,19,19,-4,-5,49,50,57,-2,-3,19,57,19,19,19,-41,19,19,-14,19,-17,-18,-41,19,-16,-13,19,-15,-19,]),'LPAREN':([8,17,19,20,22,26,27,32,33,34,35,36,41,42,43,44,45,46,47,48,49,53,55,75,76,79,81,82,83,87,88,89,91,93,94,95,98,100,101,103,],[9,20,37,20,20,-4,-5,20,53,54,55,20,-2,-3,20,20,20,20,20,20,67,20,20,20,20,20,20,-41,20,-14,20,-17,-18,-41,20,-16,-13,20,-15,-19,]),'RPAREN':([9,11,12,13,14,16,18,31,37,38,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,77,92,96,],[-41,15,-21,-22,-10,-41,-20,-36,-41,60,-26,-27,-34,-6,-24,72,-25,-35,-29,-30,-31,-32,-33,-7,-41,74,76,-41,-28,78,-23,97,-8,]),'COMMA':([12,14,57,],[16,-10,71,]),'EQUALS':([14,19,25,28,31,38,52,56,60,61,62,63,64,65,66,68,70,80,],[-10,36,43,48,-36,43,-34,43,-35,43,-30,-31,-32,-33,43,43,43,43,]),'LBRACKET':([15,74,76,78,88,97,],[17,79,81,83,94,100,]),'RBRACKET':([17,21,22,23,26,27,40,41,42,79,81,82,83,84,86,87,89,90,91,93,94,95,98,99,100,101,102,103,],[-41,39,-41,-12,-4,-5,-11,-2,-3,-41,-41,-41,-41,91,93,-14,-17,96,-18,-41,-41,-16,-13,101,-41,-15,103,-19,]),'VOID':([17,22,26,27,41,42,54,76,79,81,82,83,85,87,88,89,91,93,94,95,98,100,101,103,],[29,29,-4,-5,-2,-3,29,29,29,29,-41,29,29,-14,29,-17,-18,-41,29,-16,-13,29,-15,-19,]),'RETURN':([17,22,26,27,41,42,54,76,79,81,82,83,85,87,88,89,91,93,94,95,98,100,101,103,],[30,30,-4,-5,-2,-3,30,30,30,30,-41,30,30,-14,30,-17,-18,-41,30,-16,-13,30,-15,-19,]),'MINUS':([17,20,22,25,26,27,31,32,36,38,41,42,43,44,45,46,47,48,52,53,55,56,60,61,62,63,64,65,66,68,70,75,76,79,80,81,82,83,87,88,89,91,93,94,95,98,100,101,103,],[32,32,32,45,-4,-5,-36,32,32,45,-2,-3,32,32,32,32,32,32,-34,32,32,45,-35,45,-30,-31,-32,-33,45,45,45,32,32,32,45,32,-41,32,-14,32,-17,-18,-41,32,-16,-13,32,-15,-19,]),'NUMBER':([17,20,22,26,27,30,32,36,41,42,43,44,45,46,47,48,53,55,75,76,79,81,82,83,87,88,89,91,93,94,95,98,100,101,103,],[31,31,31,-4,-5,51,31,31,-2,-3,31,31,31,31,31,31,31,31,31,31,31,31,-41,31,-14,31,-17,-18,-41,31,-16,-13,31,-15,-19,]),'WHILE':([17,22,26,27,41,42,76,79,81,82,83,87,88,89,91,93,94,95,98,100,101,103,],[33,33,-4,-5,-2,-3,33,33,33,-41,33,-14,33,-17,-18,-41,33,-16,-13,33,-15,-19,]),'FOR':([17,22,26,27,41,42,76,79,81,82,83,87,88,89,91,93,94,95,98,100,101,103,],[34,34,-4,-5,-2,-3,34,34,34,-41,34,-14,34,-17,-18,-41,34,-16,-13,34,-15,-19,]),'IF':([17,22,26,27,41,42,76,79,81,82,83,87,88,89,91,93,94,95,98,100,101,103,],[35,35,-4,-5,-2,-3,35,35,35,-41,35,-14,35,-17,-18,-41,35,-16,-13,35,-15,-19,]),'SEMICOLON':([24,25,31,50,51,52,56,60,61,62,63,64,65,66,69,72,80,96,],[41,42,-36,-26,-27,-34,-6,-35,-29,-30,-31,-32,-33,-7,75,-28,85,-8,]),'PLUS':([25,31,38,52,56,60,61,62,63,64,65,66,68,70,80,],[44,-36,44,-34,44,-35,44,-30,-31,-32,-33,44,44,44,44,]),'TIMES':([25,31,38,52,56,60,61,62,63,64,65,66,68,70,80,],[46,-36,46,-34,46,-35,46,46,46,-32,-33,46,46,46,46,]),'DIVIDE':([25,31,38,52,56,60,61,62,63,64,65,66,68,70,80,],[47,-36,47,-34,47,-35,47,47,47,-32,-33,47,47,47,47,]),'ELSE':([26,27,41,42,82,87,89,91,93,95,98,101,103,],[-4,-5,-2,-3,88,-14,-17,-18,88,-16,-13,-15,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_declaration':([0,],[2,]),'type':([0,9,16,17,22,54,67,76,79,81,83,85,88,94,100,],[3,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'args':([9,16,67,],[11,18,73,]),'declaration':([9,16,17,22,54,67,76,79,81,83,85,88,94,100,],[12,12,28,28,28,12,28,28,28,28,28,28,28,28,]),'empty':([9,16,17,22,37,67,71,79,81,82,83,93,94,100,],[13,13,23,23,59,13,59,23,23,89,23,89,23,23,]),'body':([17,22,79,81,83,94,100,],[21,40,84,86,90,99,102,]),'line':([17,22,76,79,81,83,88,94,100,],[22,22,82,22,22,22,95,22,22,]),'statement':([17,22,54,76,79,81,83,85,88,94,100,],[24,24,69,24,24,24,24,92,24,24,24,]),'expression':([17,20,22,32,36,43,44,45,46,47,48,53,55,75,76,79,81,83,88,94,100,],[25,38,25,52,56,61,62,63,64,65,66,68,70,80,25,25,25,25,25,25,25,]),'loop_statement':([17,22,76,79,81,83,88,94,100,],[26,26,26,26,26,26,26,26,26,]),'if_statement':([17,22,76,79,81,83,88,94,100,],[27,27,27,27,27,27,27,27,27,]),'function_args':([37,71,],[58,77,]),'else_statement':([82,93,],[87,98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_declaration','program',1,'p_program','main.py',91),
  ('line -> statement SEMICOLON','line',2,'p_line','main.py',94),
  ('line -> expression SEMICOLON','line',2,'p_line','main.py',95),
  ('line -> loop_statement','line',1,'p_line','main.py',96),
  ('line -> if_statement','line',1,'p_line','main.py',97),
  ('statement -> ID EQUALS expression','statement',3,'p_assign','main.py',101),
  ('statement -> declaration EQUALS expression','statement',3,'p_assign','main.py',102),
  ('statement -> VOID ID LPAREN args RPAREN LBRACKET body RBRACKET','statement',8,'p_void_function_declaration','main.py',107),
  ('function_declaration -> type ID LPAREN args RPAREN LBRACKET body RBRACKET','function_declaration',8,'p_function_declaration','main.py',111),
  ('declaration -> type ID','declaration',2,'p_declaration','main.py',134),
  ('body -> line body','body',2,'p_body','main.py',138),
  ('body -> empty','body',1,'p_body','main.py',139),
  ('if_statement -> IF LPAREN expression RPAREN LBRACKET body RBRACKET else_statement','if_statement',8,'p_if','main.py',151),
  ('if_statement -> IF LPAREN expression RPAREN line else_statement','if_statement',6,'p_if','main.py',152),
  ('else_statement -> ELSE LBRACKET body RBRACKET','else_statement',4,'p_else','main.py',157),
  ('else_statement -> ELSE line','else_statement',2,'p_else','main.py',158),
  ('else_statement -> empty','else_statement',1,'p_else','main.py',159),
  ('loop_statement -> WHILE LPAREN expression RPAREN LBRACKET body RBRACKET','loop_statement',7,'p_while','main.py',164),
  ('loop_statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON statement RPAREN LBRACKET body RBRACKET','loop_statement',11,'p_for','main.py',169),
  ('args -> declaration COMMA args','args',3,'p_args','main.py',174),
  ('args -> declaration','args',1,'p_args','main.py',175),
  ('args -> empty','args',1,'p_args','main.py',176),
  ('function_args -> ID COMMA function_args','function_args',3,'p_function_args','main.py',186),
  ('function_args -> ID','function_args',1,'p_function_args','main.py',187),
  ('function_args -> empty','function_args',1,'p_function_args','main.py',188),
  ('statement -> RETURN ID','statement',2,'p_return_statement','main.py',192),
  ('statement -> RETURN NUMBER','statement',2,'p_return_statement','main.py',193),
  ('statement -> ID LPAREN function_args RPAREN','statement',4,'p_function_call','main.py',199),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_compare','main.py',203),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','main.py',207),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','main.py',208),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','main.py',209),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','main.py',210),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','main.py',217),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','main.py',221),
  ('expression -> NUMBER','expression',1,'p_expression_number','main.py',225),
  ('type -> INT','type',1,'p_type','main.py',229),
  ('type -> FLOAT','type',1,'p_type','main.py',230),
  ('type -> DOUBLE','type',1,'p_type','main.py',231),
  ('type -> CHAR','type',1,'p_type','main.py',232),
  ('empty -> <empty>','empty',0,'p_empty','main.py',236),
]
